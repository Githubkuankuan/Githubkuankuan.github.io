<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django filter中用contains和icontains区别</title>
    <url>/2021/11/24/Django-filter%E4%B8%AD%E7%94%A8contains%E5%92%8Cicontains%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>用 django 的人经常会用到filter过滤集合的功能，这里对比下contains和icontains区别：</p>
<pre><code class="python">queryset.filter(name__contains=&quot;e&quot;)
queryset.filter(name__icontains=&quot;e&quot;)
</code></pre>
<p>打印一下这两行代码对应的sql语句就会看到区别：</p>
<pre><code class="python">&#39;contains&#39;: &#39;LIKE BINARY %s&#39;,
&#39;icontains&#39;: &#39;LIKE %s&#39;,
</code></pre>
<p>这其中的BINARY到底代表什么意思呢，答案是 <strong>精确大小写</strong><br>而’icontains’中的’i’表示<strong>忽略大小写</strong></p>
<p>这其中的BINARY到底代表什么意思呢，答案是 <strong>精确大小写</strong><br>而’icontains’中的’i’表示<strong>忽略大小写</strong></p>
<p>举例：</p>
<pre><code>select * from plant where name like BINARY &#39;%e%&#39;;
2   eee

select * from plant where name like &#39;%e%&#39;;
1   Ezs
2   eee
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>JavaScript-es7、8</title>
    <url>/2021/11/26/JavaScript-es7%E3%80%818/</url>
    <content><![CDATA[<h1 id="ECMASript-7-新特性"><a href="#ECMASript-7-新特性" class="headerlink" title="ECMASript 7 新特性"></a>ECMASript 7 新特性</h1><h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h2><blockquote>
<p> includes 方法用来检测数组中是否包含某个元素，返回布尔类型值</p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    // includes   indexOf
    // const mingzhu = [&#39;西游记&#39;,&#39;红楼梦&#39;,&#39;三国演义&#39;,&#39;水浒传&#39;];

    //判断
    // console.log(mingzhu.includes(&#39;西游记&#39;));
    // console.log(mingzhu.includes(&#39;金瓶梅&#39;));    
&lt;/script&gt;
</code></pre>
<h2 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h2><blockquote>
<p>在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同</p>
</blockquote>
<pre><code class="javascript">// **
console.log(2 ** 10);// 
console.log(Math.pow(2, 10));
</code></pre>
<h1 id="ECMASript-8-新特性"><a href="#ECMASript-8-新特性" class="headerlink" title="ECMASript 8 新特性"></a>ECMASript 8 新特性</h1><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><blockquote>
<ol>
<li><p>async 函数的返回值为 promise 对象， </p>
</li>
<li><p>promise 对象的结果由 async 函数执行的返回值决定</p>
</li>
</ol>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //async 函数
    async function fn()&#123;
        // 返回一个字符串
        // return &#39;尚硅谷&#39;;
        // 返回的结果不是一个 Promise 类型的对象, 返回的结果就是成功 Promise 对象
        // return;
        //抛出错误, 返回的结果是一个失败的 Promise
        // throw new Error(&#39;出错啦!&#39;);
        //返回的结果如果是一个 Promise 对象
        return new Promise((resolve, reject)=&gt;&#123;
            resolve(&#39;成功的数据&#39;);
            // reject(&quot;失败的错误&quot;);
        &#125;);
    &#125;

    const result = fn();

    //调用 then 方法
    result.then(value =&gt; &#123;
        console.log(value);
    &#125;, reason =&gt; &#123;
        console.warn(reason);
    &#125;)
&lt;/script&gt;
</code></pre>
<h3 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h3><blockquote>
<ol>
<li>await 必须写在 async 函数中</li>
<li>await 右侧的表达式一般为 promise 对象 </li>
<li> await 返回的是 promise 成功的值 </li>
<li>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li>
</ol>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //创建 promise 对象
    const p = new Promise((resolve, reject) =&gt; &#123;
        // resolve(&quot;用户数据&quot;);
        reject(&quot;失败啦!&quot;);
    &#125;)

    // await 要放在 async 函数中.
    async function main() &#123;
        try &#123;
            let result = await p;
            //
            console.log(result);
        &#125; catch (e) &#123;
            console.log(e);
        &#125;
    &#125;
    //调用函数
    main();
&lt;/script&gt;
</code></pre>
<h3 id="async和await结合读取文件"><a href="#async和await结合读取文件" class="headerlink" title="async和await结合读取文件"></a>async和await结合读取文件</h3><pre><code class="javascript">//1. 引入 fs 模块
const fs = require(&quot;fs&quot;);

//读取『为学』
function readWeiXue() &#123;
    return new Promise((resolve, reject) =&gt; &#123;
        fs.readFile(&quot;./resources/为学.md&quot;, (err, data) =&gt; &#123;
            //如果失败
            if (err) reject(err);
            //如果成功
            resolve(data);
        &#125;)
    &#125;)
&#125;

function readChaYangShi() &#123;
    return new Promise((resolve, reject) =&gt; &#123;
        fs.readFile(&quot;./resources/插秧诗.md&quot;, (err, data) =&gt; &#123;
            //如果失败
            if (err) reject(err);
            //如果成功
            resolve(data);
        &#125;)
    &#125;)
&#125;

function readGuanShu() &#123;
    return new Promise((resolve, reject) =&gt; &#123;
        fs.readFile(&quot;./resources/观书有感.md&quot;, (err, data) =&gt; &#123;
            //如果失败
            if (err) reject(err);
            //如果成功
            resolve(data);
        &#125;)
    &#125;)
&#125;

//声明一个 async 函数
async function main()&#123;
    //获取为学内容
    let weixue = await readWeiXue();
    //获取插秧诗内容
    let chayang = await readChaYangShi();
    // 获取观书有感
    let guanshu = await readGuanShu();

    console.log(weixue.toString());
    console.log(chayang.toString());
    console.log(guanshu.toString());
&#125;

main();
</code></pre>
<h3 id="async与await封装AJAX请求"><a href="#async与await封装AJAX请求" class="headerlink" title="async与await封装AJAX请求"></a>async与await封装AJAX请求</h3><pre><code class="javascript">&lt;script&gt;
    // 发送 AJAX 请求, 返回的结果是 Promise 对象
    function sendAJAX(url) &#123;
        return new Promise((resolve, reject) =&gt; &#123;
            //1. 创建对象
            const x = new XMLHttpRequest();

            //2. 初始化
            x.open(&#39;GET&#39;, url);

            //3. 发送
            x.send();

            //4. 事件绑定
            x.onreadystatechange = function () &#123;
                if (x.readyState === 4) &#123;
                    if (x.status &gt;= 200 &amp;&amp; x.status &lt; 300) &#123;
                        //成功啦
                        resolve(x.response);
                    &#125;else&#123;
                        //如果失败
                        reject(x.status);
                    &#125;
                &#125;
            &#125;
        &#125;)
    &#125;

    //promise then 方法测试
    // sendAJAX(&quot;https://api.apiopen.top/getJoke&quot;).then(value=&gt;&#123;
    //     console.log(value);
    // &#125;, reason=&gt;&#123;&#125;)

    // async 与 await 测试  axios
    async function main()&#123;
        //发送 AJAX 请求
        let result = await sendAJAX(&quot;https://api.apiopen.top/getJoke&quot;);
        //再次测试
        let tianqi = await sendAJAX(&#39;https://www.tianqiapi.com/api/?version=v1&amp;city=%E5%8C%97%E4%BA%AC&amp;appid=23941491&amp;appsecret=TXoD5e8P&#39;)

        console.log(tianqi);
    &#125;

    main();
    
&lt;/script&gt;
</code></pre>
<h3 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h3><h4 id="Object-values-和-Object-entries"><a href="#Object-values-和-Object-entries" class="headerlink" title="Object.values 和 Object.entries"></a>Object.values 和 Object.entries</h4><blockquote>
<ol>
<li>Object.values()方法返回一个给定对象的所有可枚举属性值的数组</li>
<li>Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组</li>
</ol>
</blockquote>
<h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h4><blockquote>
<p>该方法返回指定对象所有自身属性的描述对象</p>
</blockquote>
<pre><code>&lt;script&gt;
    //声明对象
    const school = &#123;
        name:&quot;恋爱学院&quot;,
        cities:[&#39;北京&#39;,&#39;上海&#39;,&#39;深圳&#39;],
        xueke: [&#39;前端&#39;,&#39;Java&#39;,&#39;大数据&#39;,&#39;运维&#39;]
    &#125;;

    //获取对象所有的键
    // console.log(Object.keys(school));
    //获取对象所有的值
    // console.log(Object.values(school));
    //entries
    // console.log(Object.entries(school));
    //创建 Map
    // const m = new Map(Object.entries(school));
    // console.log(m.get(&#39;cities&#39;));

    //对象属性的描述对象
    // console.log(Object.getOwnPropertyDescriptors(school));

    // const obj = Object.create(null, &#123;
    //     name: &#123;
    //         //设置值
    //         value: &#39;恋爱学院&#39;,
    //         //属性特性
    //         writable: true,
    //         configurable: true,
    //         enumerable: true
    //     &#125; 
    // &#125;);
&lt;/script&gt;
</code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>es7、es8</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-es9、10、11</title>
    <url>/2021/11/26/JavaScript-es9%E3%80%8110%E3%80%8111/</url>
    <content><![CDATA[<h1 id="ECMASript-9-新特性"><a href="#ECMASript-9-新特性" class="headerlink" title="ECMASript 9 新特性"></a>ECMASript 9 新特性</h1><h2 id="Rest-Spread-属性"><a href="#Rest-Spread-属性" class="headerlink" title="Rest/Spread 属性"></a>Rest/Spread 属性</h2><blockquote>
<p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组， 在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符</p>
</blockquote>
<pre><code class="javascript">&lt;!-- 
    Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，
    在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符
    --&gt;
&lt;script&gt;
    //rest 参数
    function connect(&#123;host, port, ...user&#125;)&#123;
        console.log(host);
        console.log(port);
        console.log(user);
    &#125;

    connect(&#123;
        host: &#39;127.0.0.1&#39;,
        port: 3306,
        username: &#39;root&#39;,
        password: &#39;root&#39;,
        type: &#39;master&#39;
    &#125;);


    //对象合并
    const skillOne = &#123;
        q: &#39;天音波&#39;
    &#125;

    const skillTwo = &#123;
        w: &#39;金钟罩&#39;
    &#125;

    const skillThree = &#123;
        e: &#39;天雷破&#39;
    &#125;
    const skillFour = &#123;
        r: &#39;猛龙摆尾&#39;
    &#125;

    const mangseng = &#123;...skillOne, ...skillTwo, ...skillThree, ...skillFour&#125;;

    console.log(mangseng)

    // ...skillOne   =&gt;  q: &#39;天音波&#39;, w: &#39;金钟罩&#39;

&lt;/script&gt;
</code></pre>
<h2 id="正则表达式命名捕获组"><a href="#正则表达式命名捕获组" class="headerlink" title="正则表达式命名捕获组"></a>正则表达式命名捕获组</h2><blockquote>
<p>ES9 允许命名捕获组使用符号『?』,这样获取捕获结果可读性更强</p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //声明一个字符串
    // let str = &#39;&lt;a href=&quot;https://kuankuan.xyz/&quot;&gt;宽宽博客&lt;/a&gt;&#39;;

    // //提取 url 与 『标签文本』
    // const reg = /&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/;

    // //执行
    // const result = reg.exec(str);

    // console.log(result);
    // // console.log(result[1]);
    // // console.log(result[2]);

    
    let str = &#39;&lt;a href=&quot;https://kuankuan.xyz/&quot;&gt;宽宽博客&lt;/a&gt;&#39;;
    //分组命名
    const reg = /&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/;

    const result = reg.exec(str);

    console.log(result.groups.url);

    console.log(result.groups.text);
&lt;/script&gt;
</code></pre>
<h2 id="正则表达式反向断言"><a href="#正则表达式反向断言" class="headerlink" title="正则表达式反向断言"></a>正则表达式反向断言</h2><blockquote>
<p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选。</p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //声明字符串
    let str = &#39;JS5211314你知道么555啦啦啦&#39;;
    //正向断言
    const reg = /\d+(?=啦)/;
    const result = reg.exec(str);

    //反向断言
    const reg = /(?&lt;=么)\d+/;
    const result = reg.exec(str);
    console.log(result);
&lt;/script&gt;
</code></pre>
<h2 id="正则表达式-dotAll-模式"><a href="#正则表达式-dotAll-模式" class="headerlink" title="正则表达式 dotAll 模式"></a>正则表达式 dotAll 模式</h2><blockquote>
<p>正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行 终止符出现</p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //dot  .  元字符  除换行符以外的任意单个字符
    let str = `
    &lt;ul&gt;
        &lt;li&gt;
            &lt;a&gt;肖生克的救赎&lt;/a&gt;
            &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a&gt;阿甘正传&lt;/a&gt;
            &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;`;
    //声明正则
    // const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;
    const reg = /&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/gs;
    //执行匹配
    // const result = reg.exec(str);
    let result;
    let data = [];
    while(result = reg.exec(str))&#123;
        data.push(&#123;title: result[1], time: result[2]&#125;);
    &#125;
    //输出结果
    console.log(data);
&lt;/script&gt;
</code></pre>
<h1 id="ECMASript-10-新特性"><a href="#ECMASript-10-新特性" class="headerlink" title="ECMASript 10 新特性"></a>ECMASript 10 新特性</h1><h2 id="1-Object-fromEntries"><a href="#1-Object-fromEntries" class="headerlink" title="1-Object.fromEntries"></a>1-Object.fromEntries</h2><pre><code class="javascript">&lt;script&gt;
    //二维数组
    // const result = Object.fromEntries([
    //     [&#39;name&#39;,&#39;恋爱学院&#39;],
    //     [&#39;xueke&#39;, &#39;Java,大数据,前端,云计算&#39;]
    // ]);

    //Map
    // const m = new Map();
    // m.set(&#39;name&#39;,&#39;ATGUIGU&#39;);
    // const result = Object.fromEntries(m);

    //Object.entries ES8
    const arr = Object.entries(&#123;
        name: &quot;恋爱学院&quot;
    &#125;)
    console.log(arr);
&lt;/script&gt;
</code></pre>
<h2 id="2-trimStart与trimEnd"><a href="#2-trimStart与trimEnd" class="headerlink" title="2-trimStart与trimEnd"></a>2-trimStart与trimEnd</h2><pre><code class="javascript">&lt;script&gt;    
    // trim
    let str = &#39;   iloveyou   &#39;;

    console.log(str);
    console.log(str.trimStart());
    console.log(str.trimEnd());
&lt;/script&gt;
</code></pre>
<h2 id="3-Array-prototype-flat与flatMap"><a href="#3-Array-prototype-flat与flatMap" class="headerlink" title="3-Array.prototype.flat与flatMap"></a>3-Array.prototype.flat与flatMap</h2><pre><code class="javascript">&lt;script&gt;
    //flat 平
    //将多维数组转化为低位数组
    // const arr = [1,2,3,4,[5,6]];
    // const arr = [1,2,3,4,[5,6,[7,8,9]]];
    //参数为深度 是一个数字
    // console.log(arr.flat(2));  

    //flatMap
    const arr = [1,2,3,4];
    const result = arr.flatMap(item =&gt; [item * 10]);
    console.log(result);
&lt;/script&gt;
</code></pre>
<h2 id="4-Symbol-prototype-description"><a href="#4-Symbol-prototype-description" class="headerlink" title="4-Symbol.prototype.description"></a>4-Symbol.prototype.description</h2><pre><code class="javascript">&lt;script&gt;
    //创建 Symbol
    let s = Symbol(&#39;恋爱学院&#39;);

    console.log(s.description);
&lt;/script&gt;
</code></pre>
<h1 id="ECMASript-11-新特性"><a href="#ECMASript-11-新特性" class="headerlink" title="ECMASript 11 新特性"></a>ECMASript 11 新特性</h1><h2 id="1-私有属性"><a href="#1-私有属性" class="headerlink" title="1-私有属性"></a>1-私有属性</h2><pre><code class="JavaScript">&lt;script&gt;
    class Person&#123;
        //公有属性
        name;
        //私有属性
        #age;
        #weight;
        //构造方法
        constructor(name, age, weight)&#123;
            this.name = name;
            this.#age = age;
            this.#weight = weight;
        &#125;

        intro()&#123;
            console.log(this.name);
            console.log(this.#age);
            console.log(this.#weight);
        &#125;
    &#125;

    //实例化
    const girl = new Person(&#39;晓红&#39;, 18, &#39;45kg&#39;);

    // console.log(girl.name);
    // console.log(girl.#age);
    // console.log(girl.#weight);

    girl.intro();
&lt;/script&gt;
</code></pre>
<h2 id="2-Promise-allSettled"><a href="#2-Promise-allSettled" class="headerlink" title="2-Promise.allSettled"></a>2-Promise.allSettled</h2><pre><code class="JavaScript">&lt;script&gt;
    //声明两个promise对象
    const p1 = new Promise((resolve, reject)=&gt;&#123;
        setTimeout(()=&gt;&#123;
            resolve(&#39;商品数据 - 1&#39;);
        &#125;,1000)
    &#125;);

    const p2 = new Promise((resolve, reject)=&gt;&#123;
        setTimeout(()=&gt;&#123;
            resolve(&#39;商品数据 - 2&#39;);
            // reject(&#39;出错啦!&#39;);
        &#125;,1000)
    &#125;);

    //调用 allsettled 方法
    // const result = Promise.allSettled([p1, p2]);
    
    // const res = Promise.all([p1, p2]);

    console.log(res);

&lt;/script&gt;
</code></pre>
<h2 id="3-String-prototype-matchAll"><a href="#3-String-prototype-matchAll" class="headerlink" title="3-String.prototype.matchAll"></a>3-String.prototype.matchAll</h2><pre><code class="JavaScript">&lt;script&gt;
    let str = `&lt;ul&gt;
        &lt;li&gt;
            &lt;a&gt;肖生克的救赎&lt;/a&gt;
            &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a&gt;阿甘正传&lt;/a&gt;
            &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;`;

    //声明正则
    const reg = /&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/sg

    //调用方法
    const result = str.matchAll(reg);

    // for(let v of result)&#123;
    //     console.log(v);
    // &#125;

    const arr = [...result];

    console.log(arr);    
&lt;/script&gt;
</code></pre>
<h2 id="4-可选链操作符"><a href="#4-可选链操作符" class="headerlink" title="4-可选链操作符"></a>4-可选链操作符</h2><pre><code class="JavaScript">&lt;script&gt;
    // ?.
    function main(config)&#123;
        // const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;
        const dbHost = config?.db?.host;

        console.log(dbHost);
    &#125;

    main(&#123;
        db: &#123;
            host:&#39;192.168.1.100&#39;,
            username: &#39;root&#39;
        &#125;,
        cache: &#123;
            host: &#39;192.168.1.200&#39;,
            username:&#39;admin&#39;
        &#125;
    &#125;)
&lt;/script&gt;
</code></pre>
<h2 id="5-动态import加载"><a href="#5-动态import加载" class="headerlink" title="5-动态import加载"></a>5-动态import加载</h2><pre><code class="javascript">&lt;body&gt;
    &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;
    &lt;script src=&quot;./js/app.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
</code></pre>
<pre><code class="javascript">// import * as m1 from &quot;./hello.js&quot;;
//获取元素
const btn = document.getElementById(&#39;btn&#39;);

btn.onclick = function()&#123;
    import(&#39;./hello.js&#39;).then(module =&gt; &#123;
        module.hello();
    &#125;);
&#125;
</code></pre>
<pre><code class="javascript">export function hello()&#123;
    alert(&#39;Hello&#39;);
&#125;
</code></pre>
<h2 id="6-BigInt"><a href="#6-BigInt" class="headerlink" title="6-BigInt"></a>6-BigInt</h2><pre><code class="JavaScript">&lt;script&gt;
    //大整形
    // let n = 521n;
    // console.log(n, typeof(n));

    //函数
    // let n = 123;
    // console.log(BigInt(n));
    // console.log(BigInt(1.2));

    //大数值运算
    let max = Number.MAX_SAFE_INTEGER;
    console.log(max);
    console.log(max + 1);
    console.log(max + 2);

    console.log(BigInt(max))
    console.log(BigInt(max) + BigInt(1))
    console.log(BigInt(max) + BigInt(2))
&lt;/script&gt;
</code></pre>
<h2 id="7-globalThis"><a href="#7-globalThis" class="headerlink" title="7-globalThis"></a>7-globalThis</h2><pre><code class="javascript">&lt;script&gt;
    console.log(globalThis);
&lt;/script&gt;
</code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>es9、es10、es11</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>if__name__==&#39;__main__&#39; 理解和总结</title>
    <url>/2021/11/24/if-name-main-%E7%90%86%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>在Python当中，如果代码写得规范一些，通常会写上一句“if <strong>name</strong>==’<strong>main</strong>:”作为程序的入口，但似乎没有这么一句代码，程序也能正常运行。这句代码多余吗？原理又在哪里？本篇博文对此进行总结说明。</p>
<h1 id="二、程序入口"><a href="#二、程序入口" class="headerlink" title="二、程序入口"></a>二、程序入口</h1><p> 学过Java、C、C++的程序员应该都知道，每次开启一个程序，都必须写一个主函数作为程序的入口，也就是我们常说的main函数。如下所示， main()就是Java中的一个main函数。</p>
<pre><code class="java">public class HelloWorld &#123;

    public static void main(String[] args) &#123;

        System.out.println(&quot;HelloWorld&quot;);

    &#125;
&#125;    
</code></pre>
<p>与 Java、C、C++ 等几种语言不同的是，Python是一种解释型脚本语言，在执行之前不同要将所有代码先编译成中间代码，Python程序运行时是从模块顶行开始，逐行进行翻译执行，所以，最顶层（没有被缩进）的代码都会被执行，所以Python中并不需要一个统一的main()作为程序的入口。在某种意义上讲，“if <strong>name</strong>==’<strong>main</strong>:”也像是一个标志，象征着Java等语言中的程序主入口，告诉其他程序员，代码入口在此——这是“if <strong>name</strong>==’<strong>main</strong>:”这条代码的意义之一。</p>
<h1 id="三、模块引入"><a href="#三、模块引入" class="headerlink" title="三、模块引入"></a>三、模块引入</h1><p> 我们知道，当我们把模块A中的代码在模块B中进行import A时，只要B模块代码运行到该import语句，模块A的代码会被执行。</p>
<h4 id="模块A："><a href="#模块A：" class="headerlink" title="模块A："></a>模块A：</h4><pre><code class="python"># 模块A

a = 100

print(&#39;你好，我是模块A……&#39;)

print(a)
</code></pre>
<h4 id="模块B："><a href="#模块B：" class="headerlink" title="模块B："></a>模块B：</h4><pre><code class="python"># 模块B

from package01 import A

b = 200

print(&#39;你好，我是模块B……&#39;)

print(b)
</code></pre>
<p>运行模块B时，输出结果如下：</p>
<pre><code class="python">你好，我是模块A……

100

你好，我是模块B……

200
</code></pre>
<p>如果在模块A中，我们有部分的代码不想在被导入到B时直接被运行，但在直接运行A时可直接运行，那该怎么做呢？那就可以用到“if <strong>name</strong>==’<strong>main</strong>:”这行代码了，我们队上面用到的A模块代码进行修改：</p>
<h4 id="A模块代码修改为："><a href="#A模块代码修改为：" class="headerlink" title="A模块代码修改为："></a>A模块代码修改为：</h4><pre><code class="python"># 模块A

a = 100

print(&#39;你好，我是模块A……&#39;)

if __name__==&#39;__main__&#39;:

    print(a)
</code></pre>
<h4 id="B模块不做修改，直接执行B模块，输出结果如下："><a href="#B模块不做修改，直接执行B模块，输出结果如下：" class="headerlink" title="B模块不做修改，直接执行B模块，输出结果如下："></a>B模块不做修改，直接执行B模块，输出结果如下：</h4><pre><code class="python">你好，我是模块A……

你好，我是模块B……

200
</code></pre>
<p>看到了吗，A模块中的a的值就没有再被输出了。所以，当你要导入某个模块，但又不想改模块的部分代码被直接执行，那就可以这一部分代码放在“if <strong>name</strong>==’<strong>main</strong>‘:”内部。</p>
<h1 id="四、’name‘与“-main-”"><a href="#四、’name‘与“-main-”" class="headerlink" title="四、’name‘与“____main____”"></a>四、’<strong><strong>name</strong></strong>‘与“____main____”</h1><p>看到现在也许心中还是疑惑，为什么会这样，那么现在我们来说一说“if <strong>name</strong>==’<strong>main</strong>‘:”的原理。</p>
<p>“____name____”是Python的内置变量，用于指代当前模块。我们修改上面用到的A模块和B模块，在模块中分别输出模块的名称：</p>
<h4 id="模块A"><a href="#模块A" class="headerlink" title="模块A:"></a>模块A:</h4><pre><code class="python"># 模块A

print(&#39;你好，我是模块A……&#39;)

print(&#39;模块A中__name__的值：&#123;&#125;&#39;.format(__name__))

print(&#39;-------------------------&#39;)
</code></pre>
<h4 id="模块B：-1"><a href="#模块B：-1" class="headerlink" title="模块B："></a>模块B：</h4><pre><code class="python"># 模块B

from package01 import A

print(&#39;你好，我是模块B……&#39;)

print(&#39;模块B中__name__的值：&#123;&#125;&#39;.format(__name__))
</code></pre>
<h4 id="执行A模块时，输出结果："><a href="#执行A模块时，输出结果：" class="headerlink" title="执行A模块时，输出结果："></a>执行A模块时，输出结果：</h4><pre><code class="python">你好，我是模块A……

模块A中__name__的值：__main__

-------------------------

执行B模块时，输出结果：

你好，我是模块A……

模块A中__name__的值：package01.A

-------------------------

你好，我是模块B……

模块B中__name__的值：__main__
</code></pre>
<blockquote>
<p>发现神奇之处了吗？当哪个模块被直接执行时，该模块“____name____”的值就是“____main____”，当被导入另一模块时，“__name__”的值就是模块的真实名称。用一个类比来解释一下：记得小时候要轮流打算教室，轮到自己的时候（模块被直接执行的时候），我们会说今天是“我”（__main__）值日，称呼其他人时，我们就会直接喊他们的名字。所以，“__main__”就相当于当事人，或者说第一人称的“我”。</p>
</blockquote>
<blockquote>
<p>所以，当运行“if <strong>name</strong>==’<strong>main</strong>‘:”语句时，如果当前模块时被直接执行，__name__的值就是__main__，条件判断的结果为True，“if <strong>name</strong>==’<strong>main</strong>‘:”下面的代码块就会被执行。</p>
</blockquote>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>“if <strong>name</strong>==’<strong>main</strong>‘:”语句的用处与原理大概也讲清楚了，如果没说明白，或者是我没理解到位，请给我留言。另外多说一句，“if <strong>name</strong>==’<strong>main</strong>‘:”很多时候看似无用，但是，出于代码的规范性，还是有必要的。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2021/11/10/one/</url>
    <content><![CDATA[<h1 id="这是第一篇博客内容"><a href="#这是第一篇博客内容" class="headerlink" title="这是第一篇博客内容"></a>这是第一篇博客内容</h1><p>为什么会突然搭建一个自己博客呢？  好问题！<br>在  **B站 ** 上看到一个资深程序员的一篇博客内容: 说一个代码代码习惯良好的程序员都会有自己的博客<br>后来我信誓旦旦的开始了我的搭建之旅！<br>现在也是搭建完成了  因为一个项目，没有及时的发布一篇博客内容。<br>好了认识一个吧   我叫大路宽宽！</p>
]]></content>
  </entry>
  <entry>
    <title>javascript-es6</title>
    <url>/2021/11/26/javascript-es6/</url>
    <content><![CDATA[<h1 id="let-定义变量："><a href="#let-定义变量：" class="headerlink" title="let 定义变量："></a>let 定义变量：</h1><p>声明变量</p>
<pre><code class="javascript">let a;

let b,c,d;

let e = 100;

let f = 521, g = &#39;iloveyou&#39;, h = [];
</code></pre>
<ol>
<li>变量不能重复声明</li>
</ol>
<pre><code class="javascript">let star = &#39;罗志祥&#39;;
let star = &#39;小猪&#39;;
</code></pre>
<ol start="2">
<li>块儿级作用域  全局, 函数, eval</li>
</ol>
<pre><code class="javascript">if else while for 

&#123;
    let girl = &#39;周扬青&#39;;
&#125;

console.log(girl);
</code></pre>
<ol start="3">
<li>不存在变量提升</li>
</ol>
<pre><code class="javascript">console.log(song);

let song = &#39;恋爱达人&#39;;
</code></pre>
<ol start="4">
<li>不影响作用域链</li>
</ol>
<pre><code class="javascript">&#123;
    let school = &#39;恋爱学院&#39;;
    function fn()&#123;
        console.log(school);
    &#125;
    fn();
&#125;
</code></pre>
<blockquote>
<p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p>
<pre><code>1) 不允许重复声明
2) 块儿级作用域
3) 不存在变量提升
4) 不影响作用域链
</code></pre>
</blockquote>
<h1 id="let-案例"><a href="#let-案例" class="headerlink" title="let 案例"></a>let 案例</h1><p>点击 DIV 换色</p>
<pre><code class="javascript">&lt;style&gt;

    .item &#123;

      width: 100px;

      height: 50px;

      border: solid 1px rgb(42, 156, 156);

      float: left;

      margin-right: 10px;

    &#125;

&lt;/style&gt;

&lt;html&gt;
    &lt;div class=&quot;container&quot;&gt;

    &lt;h2 class=&quot;page-header&quot;&gt;点击切换颜色&lt;/h2&gt;

        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;

        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;

        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;

      &lt;/div&gt;

&lt;script&gt;

    //获取div元素对象
    let items = document.getElementsByClassName(&#39;item&#39;);

    //遍历并绑定事件
    for(let i = 0;i&lt;items.length;i++)&#123;
        items[i].onclick = function()&#123;
        //修改当前元素的背景颜色
        // this.style.background = &#39;pink&#39;;
        items[i].style.background = &#39;pink&#39;;
    &#125;
&#125;

&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<h1 id="const-定义常量"><a href="#const-定义常量" class="headerlink" title="const 定义常量"></a>const 定义常量</h1><pre><code class="javascript">//声明常量

const SCHOOL = &#39;恋爱学院&#39;;

//1. 一定要赋初始值

const A;

//2. 一般常量使用大写(潜规则)

const a = 100;

//3. 常量的值不能修改

SCHOOL = &#39;LIANAIXUEYUAN&#39;;

//4. 块儿级作用域

&#123;
    const PLAYER = &#39;UZI&#39;;
&#125;

console.log(PLAYER);

//5. 对于数组和对象的元素修改, 不算做对常量的修改, 不会报错

const TEAM = [&#39;UZI&#39;,&#39;MXLG&#39;,&#39;Ming&#39;,&#39;Letme&#39;];
TEAM.push(&#39;Meiko&#39;);
</code></pre>
<blockquote>
<p>const 关键字用来声明常量，const 声明有以下特点</p>
<pre><code>1) 声明必须赋初始值
2) 标识符一般为大写
3) 不允许重复声明
4) 值不允许修改
5) 块儿级作用域
</code></pre>
</blockquote>
<pre><code>  注意: 对象属性修改和数组元素变化不会出发 const 错误
  应用场景：声明对象类型使用 const，非对象类型声明选择 let
</code></pre>
<h1 id="变量解构赋值"><a href="#变量解构赋值" class="headerlink" title="变量解构赋值"></a>变量解构赋值</h1><pre><code class="javascript">//ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，
//这被称为解构赋值。
//1. 数组的结构
const F4 = [&#39;小沈阳&#39;,&#39;刘能&#39;,&#39;赵四&#39;,&#39;宋小宝&#39;];
let [xiao, liu, zhao, song] = F4;
console.log(xiao);
console.log(liu);
console.log(zhao);
console.log(song);

//2. 对象的解构
const zhao = &#123;
    name: &#39;赵本山&#39;,
    age: &#39;不详&#39;,
    xiaopin: function()&#123;
        console.log(&quot;我可以演小品&quot;);
    &#125;
&#125;;

let &#123;name, age, xiaopin&#125; = zhao;
console.log(name);
console.log(age);
console.log(xiaopin);
xiaopin();

let &#123;xiaopin&#125; = zhao;
xiaopin();
</code></pre>
<blockquote>
<p>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</p>
</blockquote>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><blockquote>
<p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p>
<pre><code>1) 字符串中可以出现换行符
2) 可以使用 $&#123;xxx&#125; 形式输出变量
   注意：当遇到字符串与变量拼接的情况使用模板字符串
</code></pre>
</blockquote>
<pre><code class="javasciprt">// ES6 引入新的声明字符串的方式 『``』 &#39;&#39; &quot;&quot; 
//1. 声明
let str = `我也是一个字符串哦!`;
console.log(str, typeof str);

//2. 内容中可以直接出现换行符
let str = `&lt;ul&gt;
        &lt;li&gt;沈腾&lt;/li&gt;
        &lt;li&gt;玛丽&lt;/li&gt;
        &lt;li&gt;魏翔&lt;/li&gt;
        &lt;li&gt;艾伦&lt;/li&gt;
        &lt;/ul&gt;`;

//3. 变量拼接
let lovest = &#39;魏翔&#39;;
let out = `$&#123;lovest&#125;是我心目中最搞笑的演员!!`;
console.log(out);
</code></pre>
<h1 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h1><pre><code class="javascript">//ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。
//这样的书写更加简洁
let name = &#39;恋爱学院&#39;;
let change = function()&#123;
    console.log(&#39;我们可以改变你!!&#39;);
&#125;

const school = &#123;
    name,
    change,
    improve()&#123;
    console.log(&quot;我们可以提高你的技能&quot;);
    &#125;
&#125;

console.log(school);
</code></pre>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><pre><code class="javascript">// ES6 允许使用「箭头」（=&gt;）定义函数。
//声明一个函数
let fn = function() &#123;

&#125;
let fn = (a, b) =&gt; &#123;
    return a + b;
&#125;

//调用函数
let result = fn(1, 2);
console.log(result);


//1. this 是静态的. this 始终指向函数声明时所在作用域下的 this 的值
function getName() &#123;
    console.log(this.name);
&#125;
let getName2 = () =&gt; &#123;
    console.log(this.name);
&#125;

//设置 window 对象的 name 属性
window.name = &#39;恋爱学院&#39;;
const school = &#123;
    name: &quot;LIANAIXUEYUAN&quot;
&#125;

//直接调用
getName();
getName2();

//call 方法调用
getName.call(school);
getName2.call(school);

//2. 不能作为构造实例化对象
let Person = (name, age) =&gt; &#123;
    this.name = name;
    this.age = age;
    &#125;
let me = new Person(&#39;xiao&#39;, 30);
console.log(me);

//3. 不能使用 arguments 变量
let fn = () =&gt; &#123;
    console.log(arguments);
&#125;
fn(1, 2, 3);

//4. 箭头函数的简写
//1) 省略小括号, 当形参有且只有一个的时候
let add = n =&gt; &#123;
    return n + n;
&#125;
console.log(add(9));
//2) 省略花括号, 当代码体只有一条语句的时候, 此时 return 必须省略
// 而且语句的执行结果就是函数的返回值
let pow = n =&gt; n * n;

console.log(pow(8));
</code></pre>
<h1 id="箭头函数实践"><a href="#箭头函数实践" class="headerlink" title="箭头函数实践"></a>箭头函数实践</h1><pre><code class="javascript">&lt;style&gt;
    div &#123;
        width: 200px;
        height: 200px;
        background: #58a;
    &#125;
&lt;/style&gt;

&lt;html&gt;
    &lt;div id=&quot;ad&quot;&gt;&lt;/div&gt;    
&lt;/html&gt;
&lt;script&gt;
        //需求-1  点击 div 2s 后颜色变成『粉色』
        //获取元素
        let ad = document.getElementById(&#39;ad&#39;);
        //绑定事件
        ad.addEventListener(&quot;click&quot;, function() &#123;
            //保存 this 的值
            // let _this = this;
            //定时器
            setTimeout(() =&gt; &#123;
                //修改背景颜色 this
                // console.log(this);
                // _this.style.background = &#39;pink&#39;;
                this.style.background = &#39;pink&#39;;
            &#125;, 2000);
        &#125;);

        //需求-2  从数组中返回偶数的元素
        const arr = [1, 6, 9, 10, 100, 25];
        // const result = arr.filter(function(item)&#123;
        //     if(item % 2 === 0)&#123;
        //         return true;
        //     &#125;else&#123;
        //         return false;
        //     &#125;
        // &#125;);

        const result = arr.filter(item =&gt; item % 2 === 0);

        console.log(result);

        // 箭头函数适合与 this 无关的回调. 定时器, 数组的方法回调
        // 箭头函数不适合与 this 有关的回调.  事件回调, 对象的方法
    &lt;/script&gt;
</code></pre>
<h1 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h1><blockquote>
<p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p>
<p>注意：rest 参数非常适合不定个数参数函数的场景</p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    // ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments
    // ES5 获取实参的方式
    function date() &#123;
        console.log(arguments);
    &#125;
    date(&#39;白芷&#39;, &#39;阿娇&#39;, &#39;思慧&#39;);

    // rest 参数
    function date(...args) &#123;
        console.log(args); // filter some every map 
    &#125;
    date(&#39;阿娇&#39;, &#39;柏芝&#39;, &#39;思慧&#39;);

    // rest 参数必须要放到参数最后
    function fn(a, b, ...args) &#123;
        console.log(a);
        console.log(b);
        console.log(args);
    &#125;
    fn(1, 2, 3, 4, 5, 6);
&lt;/script&gt;
</code></pre>
<h1 id="spread-扩展运算符"><a href="#spread-扩展运算符" class="headerlink" title="spread 扩展运算符"></a>spread 扩展运算符</h1><blockquote>
<p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一 9 更多 Java –大数据 –前端 –python 人工智能资料下载，可访问百度：尚硅谷官网 个数组转为用逗号分隔的参数序列，对数组进行解包。</p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    // 『...』 扩展运算符能将『数组』转换为逗号分隔的『参数序列』
    //声明一个数组 ...
    const tfboys = [&#39;易烊千玺&#39;,&#39;王源&#39;,&#39;王俊凯&#39;];
    // =&gt; &#39;易烊千玺&#39;,&#39;王源&#39;,&#39;王俊凯&#39;

    // 声明一个函数
    function chunwan()&#123;
        console.log(arguments);
    &#125;

    chunwan(...tfboys);// chunwan(&#39;易烊千玺&#39;,&#39;王源&#39;,&#39;王俊凯&#39;)
&lt;/script&gt;
</code></pre>
<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><blockquote>
<p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。</p>
<p>Symbol 特点 </p>
<ol>
<li>Symbol 的值是唯一的，用来解决命名冲突的问题 </li>
<li>Symbol 值不能与其他数据进行运算 </li>
<li>Symbol 定义 的 对象属 性 不能 使 用 for…in 循 环遍 历 ，但 是可 以 使 用 Reflect.ownKeys 来获取对象的所有键名</li>
</ol>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //创建Symbol
    let s = Symbol();
    // console.log(s, typeof s);
    let s2 = Symbol(&#39;恋爱学院&#39;);
    let s3 = Symbol(&#39;恋爱学院&#39;);
    //Symbol.for 创建
    let s4 = Symbol.for(&#39;恋爱学院&#39;);
    let s5 = Symbol.for(&#39;恋爱学院&#39;);

    //不能与其他数据进行运算
    //    let result = s + 100;
    //    let result = s &gt; 100;
    //    let result = s + s;

    // USONB  you are so niubility 
    // u  undefined
    // s  string  symbol
    // o  object
    // n  null number
    // b  boolean
&lt;/script&gt;
</code></pre>
<h1 id="Symbol创建对象属性"><a href="#Symbol创建对象属性" class="headerlink" title="Symbol创建对象属性"></a>Symbol创建对象属性</h1><pre><code class="javascript">&lt;script&gt;
    //向对象中添加方法 up down
    let game = &#123;
        name:&#39;俄罗斯方块&#39;,
        up: function()&#123;&#125;,
        down: function()&#123;&#125;
    &#125;;
    
    //声明一个对象
    let methods = &#123;
        up: Symbol(),
        down: Symbol()
    &#125;;

    game[methods.up] = function()&#123;
        console.log(&quot;我可以改变形状&quot;);
    &#125;

    game[methods.down] = function()&#123;
        console.log(&quot;我可以快速下降!!&quot;);
    &#125;

    console.log(game);

    let youxi = &#123;
        name:&quot;狼人杀&quot;,
        [Symbol(&#39;say&#39;)]: function()&#123;
            console.log(&quot;我可以发言&quot;)
        &#125;,
        [Symbol(&#39;zibao&#39;)]: function()&#123;
            console.log(&#39;我可以自爆&#39;);
        &#125;
    &#125;

    console.log(youxi)
&lt;/script&gt;
</code></pre>
<h1 id="Symbol内置属性"><a href="#Symbol内置属性" class="headerlink" title="Symbol内置属性"></a>Symbol内置属性</h1><pre><code class="javascript">&lt;script&gt;
    class Person &#123;
        static[Symbol.hasInstance](param) &#123;
            console.log(param);
            console.log(&quot;我被用来检测类型了&quot;);
            return false;
        &#125;
    &#125;

    let o = &#123;&#125;;

    console.log(o instanceof Person);

    const arr = [1, 2, 3];
    const arr2 = [4, 5, 6];
    arr2[Symbol.isConcatSpreadable] = false;
    console.log(arr.concat(arr2));
&lt;/script&gt; 
    ...
</code></pre>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><blockquote>
<p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提 供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。 </p>
<p>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费 </p>
<ol start="2">
<li>原生具备 iterator 接口的数据(可用 for of 遍历) <ol>
<li>a) Array</li>
<li>b) Arguments</li>
<li>c) Set </li>
<li>d) Map</li>
<li>e) String</li>
<li>f) TypedArray</li>
<li>g) NodeList </li>
</ol>
</li>
<li><ol start="3">
<li>工作原理 <ol>
<li>a) 创建一个指针对象，指向当前数据结构的起始位置 </li>
<li>b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员 </li>
<li>c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员 </li>
<li>d) 每调用 next 方法返回一个包含 value 和 done 属性的对象 注: 需要自定义遍历数据的时候，要想到迭代器。</li>
</ol>
</li>
</ol>
</li>
</ol>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
    //声明一个数组
    const xiyou = [&#39;唐僧&#39;,&#39;孙悟空&#39;,&#39;猪八戒&#39;,&#39;沙僧&#39;];

    //使用 for...of 遍历数组
    // for(let v of xiyou)&#123;
    //     console.log(v);
    // &#125;

    let iterator = xiyou[Symbol.iterator]();

    //调用对象的next方法
    console.log(iterator.next());
    console.log(iterator.next());
    console.log(iterator.next());
    console.log(iterator.next());
    console.log(iterator.next());
&lt;/script&gt;
</code></pre>
<h1 id="迭代器自定义遍历对象"><a href="#迭代器自定义遍历对象" class="headerlink" title="迭代器自定义遍历对象"></a>迭代器自定义遍历对象</h1><pre><code class="javascript">&lt;script&gt;
    //声明一个对象
    const banji = &#123;
        name: &quot;终极一班&quot;,
        stus: [
            &#39;xiaoming&#39;,
            &#39;xiaoning&#39;,
            &#39;xiaotian&#39;,
            &#39;knight&#39;
        ],
        [Symbol.iterator]() &#123;
            //索引变量
            let index = 0;
            //
            let _this = this;
            return &#123;
                next: function () &#123;
                    if (index &lt; _this.stus.length) &#123;
                        const result = &#123; value: _this.stus[index], done: false &#125;;
                        //下标自增
                        index++;
                        //返回结果
                        return result;
                    &#125;else&#123;
                        return &#123;value: undefined, done: true&#125;;
                    &#125;
                &#125;
            &#125;;
        &#125;
    &#125;

    //遍历这个对象 
    for (let v of banji) &#123;
        console.log(v);
    &#125;
&lt;/script&gt;
</code></pre>
<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><blockquote>
<ol>
<li>‘*’ 的位置没有限制 </li>
<li>生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到 yield 语句后的值 </li>
<li>yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next 方法，执行一段代码 </li>
<li>next 方法可以传递实参，作为 yield 语句的返回值</li>
</ol>
</blockquote>
<pre><code class="javascript">&lt;script&gt;    
    //生成器其实就是一个特殊的函数
    //异步编程  纯回调函数  node fs  ajax mongodb
    //函数代码的分隔符
    function * gen()&#123;
        // console.log(111);
        yield &#39;一只没有耳朵&#39;;
        // console.log(222);
        yield &#39;一只没有尾部&#39;;
        // console.log(333);
        yield &#39;真奇怪&#39;;
        // console.log(444);
    &#125;

    let iterator = gen();
    console.log(iterator.next());
    console.log(iterator.next());
    console.log(iterator.next());
    console.log(iterator.next());

    //遍历
    // for(let v of gen())&#123;
    //     console.log(v);
    // &#125;

&lt;/script&gt;
</code></pre>
<h1 id="生成器函数参数"><a href="#生成器函数参数" class="headerlink" title="生成器函数参数"></a>生成器函数参数</h1><pre><code class="javascript">&lt;script&gt;
    function * gen(arg)&#123;
        console.log(arg);
        let one = yield 111;
        console.log(one);
        let two = yield 222;
        console.log(two);
        let three = yield 333;
        console.log(three);
    &#125;

    //执行获取迭代器对象
    let iterator = gen(&#39;AAA&#39;);
    console.log(iterator.next());
    //next方法可以传入实参
    console.log(iterator.next(&#39;BBB&#39;));
    console.log(iterator.next(&#39;CCC&#39;));
    console.log(iterator.next(&#39;DDD&#39;));
    
&lt;/script&gt;
</code></pre>
<h1 id="生成器函数实例"><a href="#生成器函数实例" class="headerlink" title="生成器函数实例"></a>生成器函数实例</h1><pre><code class="javascript">&lt;script&gt;
    // 异步编程  文件操作 网络操作(ajax, request) 数据库操作
    // 1s 后控制台输出 111  2s后输出 222  3s后输出 333 
    // 回调地狱
    // setTimeout(() =&gt; &#123;
    //     console.log(111);
    //     setTimeout(() =&gt; &#123;
    //         console.log(222);
    //         setTimeout(() =&gt; &#123;
    //             console.log(333);
    //         &#125;, 3000);
    //     &#125;, 2000);
    // &#125;, 1000);

    function one()&#123;
        setTimeout(()=&gt;&#123;
            console.log(111);
            iterator.next();
        &#125;,1000)
    &#125;

    function two()&#123;
        setTimeout(()=&gt;&#123;
            console.log(222);
            iterator.next();
        &#125;,2000)
    &#125;

    function three()&#123;
        setTimeout(()=&gt;&#123;
            console.log(333);
            iterator.next();
        &#125;,3000)
    &#125;

    function * gen()&#123;
        yield one();
        yield two();
        yield three();
    &#125;

    //调用生成器函数
    let iterator = gen();
    iterator.next();

&lt;/script&gt;
</code></pre>
<h1 id="生成器函数实例-2"><a href="#生成器函数实例-2" class="headerlink" title="生成器函数实例-2"></a>生成器函数实例-2</h1><pre><code class="javascript">&lt;script&gt;
    //模拟获取  用户数据  订单数据  商品数据 
    function getUsers()&#123;
        setTimeout(()=&gt;&#123;
            let data = &#39;用户数据&#39;;
            //调用 next 方法, 并且将数据传入
            iterator.next(data);
        &#125;, 1000);
    &#125;

    function getOrders()&#123;
        setTimeout(()=&gt;&#123;
            let data = &#39;订单数据&#39;;
            iterator.next(data);
        &#125;, 1000)
    &#125;

    function getGoods()&#123;
        setTimeout(()=&gt;&#123;
            let data = &#39;商品数据&#39;;
            iterator.next(data);
        &#125;, 1000)
    &#125;

    function * gen()&#123;
        let users = yield getUsers();
        let orders = yield getOrders();
        let goods = yield getGoods();
    &#125;

    //调用生成器函数
    let iterator = gen();
    iterator.next();
&lt;/script&gt;
</code></pre>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><blockquote>
<p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数， 用来封装异步操作并可以获取其成功或失败的结果。</p>
<p>\1) Promise 构造函数: Promise (excutor) {}</p>
<p>\2) Promise.prototype.then 方法</p>
<p>\3) Promise.prototype.catch 方法</p>
</blockquote>
<pre><code class="md">   插秧诗
     布袋和尚 
手把青秧插满田，
低头便见水中天。
心地清净方为道，
退步原来是向前。

   观书有感 
    作者：朱熹
半亩方塘一鉴开，
天光云影共徘徊。
问渠那得清如许？
为有源头活水来。

   为学
天下事有难易乎？
为之，则难者亦易矣；
不为，则易者亦难矣
</code></pre>
<h1 id="1-Promise基本语法"><a href="#1-Promise基本语法" class="headerlink" title="1-Promise基本语法"></a>1-Promise基本语法</h1><pre><code class="javascript">&lt;script&gt;
    //实例化 Promise 对象
    const p = new Promise(function(resolve, reject)&#123;
        setTimeout(function()&#123;
            //
            // let data = &#39;数据库中的用户数据&#39;;
            // resolve
            // resolve(data);

            let err = &#39;数据读取失败&#39;;
            reject(err);
        &#125;, 1000);
    &#125;);

    //调用 promise 对象的 then 方法
    p.then(function(value)&#123;
        console.log(value);
    &#125;, function(reason)&#123;
        console.error(reason);
    &#125;)
&lt;/script&gt;
</code></pre>
<h1 id="2-Promise封装读取文件"><a href="#2-Promise封装读取文件" class="headerlink" title="2-Promise封装读取文件"></a>2-Promise封装读取文件</h1><pre><code class="javascript">//1. 引入 fs 模块
const fs = require(&#39;fs&#39;);

//2. 调用方法读取文件
// fs.readFile(&#39;./resources/为学.md&#39;, (err, data)=&gt;&#123;
//     //如果失败, 则抛出错误
//     if(err) throw err;
//     //如果没有出错, 则输出内容
//     console.log(data.toString());
// &#125;);

//3. 使用 Promise 封装
const p = new Promise(function(resolve, reject)&#123;
    fs.readFile(&quot;./resources/为学.mda&quot;, (err, data)=&gt;&#123;
        //判断如果失败
        if(err) reject(err);
        //如果成功
        resolve(data);
    &#125;);
&#125;);

p.then(function(value)&#123;
    console.log(value.toString());
&#125;, function(reason)&#123;
    console.log(&quot;读取失败!!&quot;);
&#125;);
</code></pre>
<h1 id="3-Promise封装AJAX"><a href="#3-Promise封装AJAX" class="headerlink" title="3-Promise封装AJAX"></a>3-Promise封装AJAX</h1><pre><code class="javascript">&lt;script&gt;
    // 接口地址: https://api.apiopen.top/getJoke
    const p = new Promise((resolve, reject) =&gt; &#123;
        //1. 创建对象
        const xhr = new XMLHttpRequest();

        //2. 初始化
        xhr.open(&quot;GET&quot;, &quot;https://api.apiopen.top/getJ&quot;);

        //3. 发送
        xhr.send();

        //4. 绑定事件, 处理响应结果
        xhr.onreadystatechange = function () &#123;
            //判断
            if (xhr.readyState === 4) &#123;
                //判断响应状态码 200-299
                if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123;
                    //表示成功
                    resolve(xhr.response);
                &#125; else &#123;
                    //如果失败
                    reject(xhr.status);
                &#125;
            &#125;
        &#125;
    &#125;)
    
    //指定回调
    p.then(function(value)&#123;
        console.log(value);
    &#125;, function(reason)&#123;
        console.error(reason);
    &#125;);
&lt;/script&gt;
</code></pre>
<h1 id="4-Promise-then方法"><a href="#4-Promise-then方法" class="headerlink" title="4-Promise-then方法"></a>4-Promise-then方法</h1><pre><code class="javascript">&lt;script&gt;
    //创建 promise 对象
    const p = new Promise((resolve, reject)=&gt;&#123;
        setTimeout(()=&gt;&#123;
            resolve(&#39;用户数据&#39;);
            // reject(&#39;出错啦&#39;);
        &#125;, 1000)
    &#125;);

    //调用 then 方法  then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定
    //1. 如果回调函数中返回的结果是 非 promise 类型的属性, 状态为成功, 返回值为对象的成功的值

    // const result = p.then(value =&gt; &#123;
    //     console.log(value);
    //     //1. 非 promise 类型的属性
    //     // return &#39;iloveyou&#39;;
    //     //2. 是 promise 对象
    //     // return new Promise((resolve, reject)=&gt;&#123;
    //     //     // resolve(&#39;ok&#39;);
    //     //     reject(&#39;error&#39;);
    //     // &#125;);
    //     //3. 抛出错误
    //     // throw new Error(&#39;出错啦!&#39;);
    //     throw &#39;出错啦!&#39;;
    // &#125;, reason=&gt;&#123;
    //     console.warn(reason);
    // &#125;);

    //链式调用
    p.then(value=&gt;&#123;

    &#125;).then(value=&gt;&#123;

    &#125;);
&lt;/script&gt;
</code></pre>
<h1 id="5-Promise-catch方法"><a href="#5-Promise-catch方法" class="headerlink" title="5-Promise-catch方法"></a>5-Promise-catch方法</h1><pre><code class="javascript">&lt;script&gt;
    const p = new Promise((resolve, reject)=&gt;&#123;
        setTimeout(()=&gt;&#123;
            //设置 p 对象的状态为失败, 并设置失败的值
            reject(&quot;出错啦!&quot;);
        &#125;, 1000)
    &#125;);

    // p.then(function(value)&#123;&#125;, function(reason)&#123;
    //     console.error(reason);
    // &#125;);

    p.catch(function(reason)&#123;
        console.warn(reason);
    &#125;);
&lt;/script&gt;
</code></pre>
<h1 id="6-Promise实践-读取多个文件"><a href="#6-Promise实践-读取多个文件" class="headerlink" title="6-Promise实践-读取多个文件"></a>6-Promise实践-读取多个文件</h1><pre><code class="javascript">//引入 fs 模块
const fs = require(&quot;fs&quot;);

// fs.readFile(&#39;./resources/为学.md&#39;, (err, data1)=&gt;&#123;
//     fs.readFile(&#39;./resources/插秧诗.md&#39;, (err, data2)=&gt;&#123;
//         fs.readFile(&#39;./resources/观书有感.md&#39;, (err, data3)=&gt;&#123;
//             let result = data1 + &#39;\r\n&#39; +data2  +&#39;\r\n&#39;+ data3;
//             console.log(result);
//         &#125;);
//     &#125;);
// &#125;);

//使用 promise 实现
const p = new Promise((resolve, reject) =&gt; &#123;
    fs.readFile(&quot;./resources/为学.md&quot;, (err, data) =&gt; &#123;
        resolve(data);
    &#125;);
&#125;);

p.then(value =&gt; &#123;
    return new Promise((resolve, reject) =&gt; &#123;
        fs.readFile(&quot;./resources/插秧诗.md&quot;, (err, data) =&gt; &#123;
            resolve([value, data]);
        &#125;);
    &#125;);
&#125;).then(value =&gt; &#123;
    return new Promise((resolve, reject) =&gt; &#123;
        fs.readFile(&quot;./resources/观书有感.md&quot;, (err, data) =&gt; &#123;
            //压入
            value.push(data);
            resolve(value);
        &#125;);
    &#125;)
&#125;).then(value =&gt; &#123;
    console.log(value.join(&#39;\r\n&#39;));
&#125;);
</code></pre>
<h1 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h1><pre><code class="javascript">&lt;script&gt;
    //声明一个 set
    let s = new Set();
    let s2 = new Set([&#39;大事儿&#39;,&#39;小事儿&#39;,&#39;好事儿&#39;,&#39;坏事儿&#39;,&#39;小事儿&#39;]);

    //元素个数
    // console.log(s2.size);
    //添加新的元素
    // s2.add(&#39;喜事儿&#39;);
    //删除元素
    // s2.delete(&#39;坏事儿&#39;);
    //检测
    // console.log(s2.has(&#39;糟心事&#39;));
    //清空
    // s2.clear();
    // console.log(s2);

    for(let v of s2)&#123;
        console.log(v);
    &#125;
    
&lt;/script&gt;
</code></pre>
<h1 id="Set集合实践"><a href="#Set集合实践" class="headerlink" title="Set集合实践"></a>Set集合实践</h1><pre><code class="JavaScript">&lt;script&gt;
    let arr = [1,2,3,4,5,4,3,2,1];
    //1. 数组去重
    // let result = [...new Set(arr)];
    // console.log(result);
    //2. 交集
    let arr2 = [4,5,6,5,6];
    // let result = [...new Set(arr)].filter(item =&gt; &#123;
    //     let s2 = new Set(arr2);// 4 5 6
    //     if(s2.has(item))&#123;
    //         return true;
    //     &#125;else&#123;
    //         return false;
    //     &#125;
    // &#125;);
    // let result = [...new Set(arr)].filter(item =&gt; new Set(arr2).has(item));
    // console.log(result);

    //3. 并集
    // let union = [...new Set([...arr, ...arr2])];
    // console.log(union);

    //4. 差集
    let diff = [...new Set(arr)].filter(item =&gt; !(new Set(arr2).has(item)));
    console.log(diff);

&lt;/script&gt;
</code></pre>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><pre><code class="javascript">&lt;script&gt;
    //声明 Map
    let m = new Map();

    //添加元素
    m.set(&#39;name&#39;,&#39;恋爱学院&#39;);
    m.set(&#39;change&#39;, function()&#123;
        console.log(&quot;我们可以改变你!!&quot;);
    &#125;);
    let key = &#123;
        school : &#39;ATGUIGU&#39;
    &#125;;
    m.set(key, [&#39;北京&#39;,&#39;上海&#39;,&#39;深圳&#39;]);

    //size
    // console.log(m.size);

    //删除
    // m.delete(&#39;name&#39;);

    //获取
    // console.log(m.get(&#39;change&#39;));
    // console.log(m.get(key));

    //清空
    // m.clear();

    //遍历
    for(let v of m)&#123;
        console.log(v);
    &#125;

    // console.log(m);

&lt;/script&gt;
</code></pre>
<h1 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h1><pre><code class="JavaScript">&lt;script&gt;
    //手机
    function Phone(brand, price)&#123;
        this.brand = brand;
        this.price = price;
    &#125;

    //添加方法
    Phone.prototype.call = function()&#123;
        console.log(&quot;我可以打电话!!&quot;);
    &#125;

    //实例化对象
    let Huawei = new Phone(&#39;华为&#39;, 5999);
    Huawei.call();
    console.log(Huawei);

    //class
    class Shouji&#123;
        //构造方法 名字不能修改
        constructor(brand, price)&#123;
            this.brand = brand;
            this.price = price;
        &#125;

        //方法必须使用该语法, 不能使用 ES5 的对象完整形式
        call()&#123;
            console.log(&quot;我可以打电话!!&quot;);
        &#125;
    &#125;

    let onePlus = new Shouji(&quot;1+&quot;, 1999);

    console.log(onePlus);
&lt;/script&gt;
</code></pre>
<h1 id="class-的-get-set"><a href="#class-的-get-set" class="headerlink" title="class 的 get-set"></a>class 的 get-set</h1><pre><code class="JavaScript">&lt;script&gt;
    // get 和 set  
    class Phone&#123;
        get price()&#123;
            console.log(&quot;价格属性被读取了&quot;);
            return &#39;iloveyou&#39;;
        &#125;

        set price(newVal)&#123;
            console.log(&#39;价格属性被修改了&#39;);
        &#125;
    &#125;

    //实例化对象
    let s = new Phone();

    // console.log(s.price);
    s.price = &#39;free&#39;;
&lt;/script&gt;
</code></pre>
<h1 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h1><pre><code class="JavaScript">&lt;script&gt;
    //手机
    function Phone(brand, price)&#123;
        this.brand = brand;
        this.price = price;
    &#125;

    Phone.prototype.call = function()&#123;
        console.log(&quot;我可以打电话&quot;);
    &#125;

    //智能手机
    function SmartPhone(brand, price, color, size)&#123;
        Phone.call(this, brand, price);
        this.color = color;
        this.size = size;
    &#125;

    //设置子级构造函数的原型
    SmartPhone.prototype = new Phone;
    SmartPhone.prototype.constructor = SmartPhone;

    //声明子类的方法
    SmartPhone.prototype.photo = function()&#123;
        console.log(&quot;我可以拍照&quot;)
    &#125;

    SmartPhone.prototype.playGame = function()&#123;
        console.log(&quot;我可以玩游戏&quot;);
    &#125;

    const chuizi = new SmartPhone(&#39;锤子&#39;,2499,&#39;黑色&#39;,&#39;5.5inch&#39;);

    console.log(chuizi);

&lt;/script&gt;
</code></pre>
<h1 id="类继承-2"><a href="#类继承-2" class="headerlink" title="类继承-2"></a>类继承-2</h1><pre><code class="JavaScript">&lt;script&gt;
    class Phone&#123;
        //构造方法
        constructor(brand, price)&#123;
            this.brand = brand;
            this.price = price;
        &#125;
        //父类的成员属性
        call()&#123;
            console.log(&quot;我可以打电话!!&quot;);
        &#125;
    &#125;

    class SmartPhone extends Phone &#123;
        //构造方法
        constructor(brand, price, color, size)&#123;
            super(brand, price);// Phone.call(this, brand, price)
            this.color = color;
            this.size = size;
        &#125;

        photo()&#123;
            console.log(&quot;拍照&quot;);
        &#125;

        playGame()&#123;
            console.log(&quot;玩游戏&quot;);
        &#125;

        call()&#123;
            console.log(&#39;我可以进行视频通话&#39;);
        &#125;
    &#125;

    const xiaomi = new SmartPhone(&#39;小米&#39;,799,&#39;黑色&#39;,&#39;4.7inch&#39;);
    // console.log(xiaomi);
    xiaomi.call();
    xiaomi.photo();
    xiaomi.playGame();
&lt;/script&gt;
</code></pre>
<h1 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h1><pre><code class="JavaScript">&lt;script&gt;
    // function Phone()&#123;

    // &#125;
    // Phone.name = &#39;手机&#39;;
    // Phone.change = function()&#123;
    //     console.log(&quot;我可以改变世界&quot;);
    // &#125;
    // Phone.prototype.size = &#39;5.5inch&#39;;

    // let nokia = new Phone();

    // console.log(nokia.name);
    // // nokia.change();
    // console.log(nokia.size);

    class Phone&#123;
        //静态属性
        static name = &#39;手机&#39;;
        static change()&#123;
            console.log(&quot;我可以改变世界&quot;);
        &#125;
    &#125;

    let nokia = new Phone();
    console.log(nokia.name);
    console.log(Phone.name);
&lt;/script&gt;
</code></pre>
<h1 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h1><pre><code class="JavaScript">&lt;script&gt;
    //1. Object.is 判断两个值是否完全相等 
    console.log(Object.is(120, 120));// === 
    console.log(Object.is(NaN, NaN));// === 
    console.log(NaN === NaN);// === 

    //2. Object.assign 对象的合并
    const config1 = &#123;
        host: &#39;localhost&#39;,
        port: 3306,
        name: &#39;root&#39;,
        pass: &#39;root&#39;,
        test: &#39;test&#39;
    &#125;;
    const config2 = &#123;
        host: &#39;http://atguigu.com&#39;,
        port: 33060,
        name: &#39;atguigu.com&#39;,
        pass: &#39;iloveyou&#39;,
        test2: &#39;test2&#39;
    &#125;
    console.log(Object.assign(config1, config2));

    //3. Object.setPrototypeOf 设置原型对象  Object.getPrototypeof
    const school = &#123;
        name: &#39;尚硅谷&#39;
    &#125;
    const cities = &#123;
        xiaoqu: [&#39;北京&#39;,&#39;上海&#39;,&#39;深圳&#39;]
    &#125;
    Object.setPrototypeOf(school, cities);
    console.log(Object.getPrototypeOf(school));
    console.log(school);
&lt;/script&gt;
</code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue  单文件</title>
    <url>/2021/11/24/vue%E5%8D%95%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="初识Vue："><a href="#初识Vue：" class="headerlink" title="初识Vue："></a>初识Vue：</h1><p>​        1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</p>
<p>​        2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</p>
<p>​        3.root容器里的代码被称为【Vue模板】；</p>
<p>​        4.Vue实例和容器是一一对应的；</p>
<p>​        5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；</p>
<p>​        6.中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</p>
<p>​        7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</p>
<p>​        注意区分：js表达式 和 js代码(语句)</p>
<pre><code class="javascript">            1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：

​                  (1). a

​                  (2). a+b

​                  (3). demo(1)

​                  (4). x === y ? &#39;a&#39; : &#39;b&#39;
</code></pre>
<pre><code>            2.js代码(语句)

​                  (1). if()&#123;&#125;

​                  (2). for()&#123;&#125;
</code></pre>
<h1 id="Vue模板语法有2大类："><a href="#Vue模板语法有2大类：" class="headerlink" title="Vue模板语法有2大类："></a>Vue模板语法有2大类：</h1><h2 id="1-插值语法："><a href="#1-插值语法：" class="headerlink" title="1.插值语法："></a>1.插值语法：</h2><p>​              功能：用于解析标签体内容。</p>
<p>​              写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</p>
<h2 id="2-指令语法："><a href="#2-指令语法：" class="headerlink" title="2.指令语法："></a>2.指令语法：</h2><p>​              功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</p>
<p>​              举例：v-bind:href=”xxx” 或 简写为 :href=”xxx”，xxx同样要写js表达式，</p>
<p>​                   且可以直接读取到data中的所有属性。</p>
<p>​              备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p>
<h1 id="Vue中有2种数据绑定的方式："><a href="#Vue中有2种数据绑定的方式：" class="headerlink" title="Vue中有2种数据绑定的方式："></a>Vue中有2种数据绑定的方式：</h1><p>​          1.单向绑定(v-bind)：数据只能从data流向页面。</p>
<p>​          2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</p>
<p>​            备注：</p>
<p>​                1.双向绑定一般都应用在表单类元素上（如：input、select等）</p>
<p>​                2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</p>
<h1 id="data与el的2种写法"><a href="#data与el的2种写法" class="headerlink" title="data与el的2种写法"></a>data与el的2种写法</h1><h2 id="1-el有2种写法"><a href="#1-el有2种写法" class="headerlink" title="1.el有2种写法"></a>1.el有2种写法</h2><p>​                  (1).new Vue时候配置el属性。</p>
<p>​                  (2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p>
<h2 id="2-data有2种写法"><a href="#2-data有2种写法" class="headerlink" title="2.data有2种写法"></a>2.data有2种写法</h2><p>​                  (1).对象式</p>
<p>​                  (2).函数式</p>
<p>​                  如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p>
<h2 id="3-一个重要的原则："><a href="#3-一个重要的原则：" class="headerlink" title="3.一个重要的原则："></a>3.一个重要的原则：</h2><p>​                  由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</p>
<h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h1><pre><code>            \1. M：模型(Model) ：data中的数据

​            \2. V：视图(View) ：模板代码

​            \3. VM：视图模型(ViewModel)：Vue实例
</code></pre>
<p>​      观察发现：</p>
<p>​            1.data中所有的属性，最后都出现在了vm身上。</p>
<p>​            2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</p>
<h1 id="回顾Object-defineproperty方法"><a href="#回顾Object-defineproperty方法" class="headerlink" title="回顾Object.defineproperty方法"></a>回顾Object.defineproperty方法</h1><pre><code class="javascript">&lt;script type=&quot;text/javascript&quot; &gt;
let number = 18
let person = &#123;
name:&#39;张三&#39;,
sex:&#39;男&#39;,
&#125;

Object.defineProperty(person,&#39;age&#39;,&#123;
// value:18,
// enumerable:true, //控制属性是否可以枚举，默认值是false
// writable:true, //控制属性是否可以被修改，默认值是false
// configurable:true //控制属性是否可以被删除，默认值是false

//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值
get()&#123;
console.log(&#39;有人读取age属性了&#39;)
return number
&#125;,

//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值
set(value)&#123;
console.log(&#39;有人修改了age属性，且值是&#39;,value)
number = value
&#125;

&#125;)

// console.log(Object.keys(person))

console.log(person)
&lt;/script&gt;
</code></pre>
<h1 id="何为数据代理"><a href="#何为数据代理" class="headerlink" title="何为数据代理"></a>何为数据代理</h1><pre><code class="javascript">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;
        &lt;script type=&quot;text/javascript&quot; &gt;
            let obj = &#123;x:100&#125;
            let obj2 = &#123;y:200&#125;

            Object.defineProperty(obj2,&#39;x&#39;,&#123;
                get()&#123;
                    return obj.x
                &#125;,
                set(value)&#123;
                    obj.x = value
                &#125;
            &#125;)
        &lt;/script&gt;
</code></pre>
<h1 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h1><pre><code class="javascript">1.Vue中的数据代理：
    通过vm对象来代理data对象中属性的操作（读/写）
2.Vue中数据代理的好处：
    更加方便的操作data中的数据
3.基本原理：
    通过Object.defineProperty()把data对象中所有属性添加到vm上。
    为每一个添加到vm上的属性，都指定一个getter/setter。
    在getter/setter内部去操作（读/写）data中对应的属性。
</code></pre>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>事件的基本使用：</p>
<pre><code class="javascript">              1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；

​              2.事件的回调需要配置在methods对象中，最终会在vm上；

​              3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；

​              4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；

​              5.@click=&quot;demo&quot; 和 @click=&quot;demo($event)&quot; 效果一致，但后者可以传参；
</code></pre>
<pre><code class="javascript">Vue中的事件修饰符：

​            1.prevent：阻止默认事件（常用）；

​            2.stop：阻止事件冒泡（常用）；

​            3.once：事件只触发一次（常用）；

​            4.capture：使用事件的捕获模式；

​            5.self：只有event.target是当前操作的元素时才触发事件；

​            6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；
</code></pre>
<pre><code class="javascript">1.Vue中常用的按键别名：
                            回车 =&gt; enter
                            删除 =&gt; delete (捕获“删除”和“退格”键)
                            退出 =&gt; esc
                            空格 =&gt; space
                            换行 =&gt; tab (特殊，必须配合keydown去使用)
                            上 =&gt; up
                            下 =&gt; down
                            左 =&gt; left
                            右 =&gt; right

                2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）

                3.系统修饰键（用法特殊）：ctrl、alt、shift、meta
                            (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。
                            (2).配合keydown使用：正常触发事件。

                4.也可以使用keyCode去指定具体的按键（不推荐）

                5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名
</code></pre>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="插值语法实现"><a href="#插值语法实现" class="headerlink" title="插值语法实现"></a>插值语法实现</h3><pre><code>html
    &lt;!-- 准备好一个容器--&gt;
        &lt;div id=&quot;root&quot;&gt;
            姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            全名：&lt;span&gt;&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;&lt;/span&gt;
        &lt;/div&gt;
js
    new Vue(&#123;
            el:&#39;#root&#39;,
            data:&#123;
                firstName:&#39;张&#39;,
                lastName:&#39;三&#39;
            &#125;
        &#125;)
</code></pre>
<h3 id="methods实现"><a href="#methods实现" class="headerlink" title="methods实现"></a>methods实现</h3><pre><code>html 
    &lt;!-- 准备好一个容器--&gt;
        &lt;div id=&quot;root&quot;&gt;
            姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            全名：&lt;span&gt;&#123;&#123;fullName()&#125;&#125;&lt;/span&gt;
        &lt;/div&gt;
js 
    new Vue(&#123;
            el:&#39;#root&#39;,
            data:&#123;
                firstName:&#39;张&#39;,
                lastName:&#39;三&#39;
            &#125;,
            methods: &#123;
                fullName()&#123;
                    console.log(&#39;@---fullName&#39;)
                    return this.firstName + &#39;-&#39; + this.lastName
                &#125;
            &#125;,
        &#125;)
</code></pre>
<h3 id="计算属性实现"><a href="#计算属性实现" class="headerlink" title="计算属性实现"></a>计算属性实现</h3><pre><code>计算属性：
    1.定义：要用的属性不存在，要通过已有属性计算得来。
    2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。
    3.get函数什么时候执行？
        (1).初次读取时会执行一次。
        (2).当依赖的数据发生改变时会被再次调用。
    4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。
    5.备注：
        1.计算属性最终会出现在vm上，直接读取使用即可。
        2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。
html
        &lt;div id=&quot;root&quot;&gt;
            姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            测试：&lt;input type=&quot;text&quot; v-model=&quot;x&quot;&gt; &lt;br/&gt;&lt;br/&gt;
            全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;
            &lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;
            全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;
            全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;
        &lt;/div&gt;
js 
    const vm = new Vue(&#123;
            el:&#39;#root&#39;,
            data:&#123;
                firstName:&#39;张&#39;,
                lastName:&#39;三&#39;,
                x:&#39;你好&#39;
            &#125;,
            methods: &#123;
                demo()&#123;
                    
                &#125;
            &#125;,
            computed:&#123;
                fullName:&#123;
                    //get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值
                    //get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。
                    get()&#123;
                        console.log(&#39;get被调用了&#39;)
                        // console.log(this) //此处的this是vm
                        return this.firstName + &#39;-&#39; + this.lastName
                    &#125;,
                    //set什么时候调用? 当fullName被修改时。
                    set(value)&#123;
                        console.log(&#39;set&#39;,value)
                        const arr = value.split(&#39;-&#39;)
                        this.firstName = arr[0]
                        this.lastName = arr[1]
                    &#125;
                &#125;
            &#125;
        &#125;)
</code></pre>
<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><pre><code>html
    &lt;div id=&quot;root&quot;&gt;
        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;
        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;
    &lt;/div&gt;
js
    const vm = new Vue(&#123;
            el:&#39;#root&#39;,
            data:&#123;
                firstName:&#39;张&#39;,
                lastName:&#39;三&#39;,
            &#125;,
            computed:&#123;
                //简写
                fullName()&#123;
                    console.log(&#39;get被调用了&#39;)
                    return this.firstName + &#39;-&#39; + this.lastName
                &#125;
            &#125;
        &#125;)
</code></pre>
<h1 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h1><pre><code>html
    &lt;div id=&quot;root&quot;&gt;
            &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;
            &lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy可以写一些简单的语句 --&gt;
            &lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;
            &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;
    &lt;/div&gt;
    
js
    const vm = new Vue(&#123;
            el:&#39;#root&#39;,
            data:&#123;
                isHot:true,
            &#125;,
            computed:&#123;
                info()&#123;
                    return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;
                &#125;
            &#125;,
            methods: &#123;
                changeWeather()&#123;
                    this.isHot = !this.isHot
                &#125;
            &#125;,
        &#125;)
</code></pre>
<h4 id="监视属性watch："><a href="#监视属性watch：" class="headerlink" title="监视属性watch："></a>监视属性watch：</h4><pre><code>          1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作

​          2.监视的属性必须存在，才能进行监视！！

​          3.监视的两种写法：

​              (1).new Vue时传入watch配置

​              (2).通过vm.$watch监视
</code></pre>
<pre><code>            /* watch:&#123;
                isHot:&#123;
                    immediate:true, //初始化时让handler调用一下
                    //handler什么时候调用？当isHot发生改变时。
                    handler(newValue,oldValue)&#123;
                        console.log(&#39;isHot被修改了&#39;,newValue,oldValue)
                    &#125;
                &#125;
            &#125; */
            
            
            
            
            vm.$watch(&#39;isHot&#39;,&#123;
                immediate:true, //初始化时让handler调用一下
                //handler什么时候调用？当isHot发生改变时。
                handler(newValue,oldValue)&#123;
                console.log(&#39;isHot被修改了&#39;,newValue,oldValue)
                &#125;
            &#125;)
</code></pre>
<h2 id="深度监视："><a href="#深度监视：" class="headerlink" title="深度监视："></a>深度监视：</h2><pre><code>            (1).Vue中的watch默认不监测对象内部值的改变（一层）。

​            (2).配置deep:true可以监测对象内部值改变（多层）。

​        备注：

​            (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！

​            (2).使用watch时根据数据的具体结构，决定是否采用深度监视。
</code></pre>
<h2 id="简写-1"><a href="#简写-1" class="headerlink" title="简写"></a>简写</h2><pre><code>watch: &#123;
            //正常写法
            /* isHot:&#123;
                // immediate:true, //初始化时让handler调用一下
                // deep:true,//深度监视
                handler(newValue,oldValue)&#123;
                    console.log(&#39;isHot被修改了&#39;,newValue,oldValue)
                &#125;
            &#125;, */
            //简写
            /* isHot(newValue,oldValue)&#123;
                console.log(&#39;isHot被修改了&#39;,newValue,oldValue,this)
            &#125; */
        &#125;
</code></pre>
<h1 id="computed和watch之间的区别："><a href="#computed和watch之间的区别：" class="headerlink" title="computed和watch之间的区别："></a>computed和watch之间的区别：</h1><pre><code>            1.computed能完成的功能，watch都可以完成。

​            2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。

​        两个重要的小原则：

​              1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。

​              2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，

​                这样this的指向才是vm 或 组件实例对象。
</code></pre>
<h1 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h1><pre><code>收集表单数据：
    若：&lt;input type=&quot;text&quot;/&gt;，则v-model收集的是value值，用户输入的就是value值。
    若：&lt;input type=&quot;radio&quot;/&gt;，则v-model收集的是value值，且要给标签配置value值。
    若：&lt;input type=&quot;checkbox&quot;/&gt;
    1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）
    2.配置input的value属性:
    (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）
    (2)v-model的初始值是数组，那么收集的的就是value组成的数组
    备注：v-model的三个修饰符：
    lazy：失去焦点再收集数据
    number：输入字符串转为有效的数字
    trim：输入首尾空格过滤
</code></pre>
<pre><code>&lt;form @submit.prevent=&quot;demo&quot;&gt;
                账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt; &lt;br/&gt;&lt;br/&gt;
                密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt; &lt;br/&gt;&lt;br/&gt;
                年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt; &lt;br/&gt;&lt;br/&gt;
                性别：
                男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;
                女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt; &lt;br/&gt;&lt;br/&gt;
                爱好：
                学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;
                打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;
                吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;
                &lt;br/&gt;&lt;br/&gt;
                所属校区
                &lt;select v-model=&quot;userInfo.city&quot;&gt;
                    &lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;
                    &lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;
                    &lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;
                    &lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;
                    &lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;
                &lt;/select&gt;
                &lt;br/&gt;&lt;br/&gt;
                其他信息：
                &lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt; &lt;br/&gt;&lt;br/&gt;
                &lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.atguigu.com&quot;&gt;《用户协议》&lt;/a&gt;
                &lt;button&gt;提交&lt;/button&gt;
&lt;/form&gt;
            
            
            
            
data:&#123;
    userInfo:&#123;
    account:&#39;&#39;,
    password:&#39;&#39;,
    age:18,
    sex:&#39;female&#39;,
    hobby:[],
    city:&#39;beijing&#39;,
    other:&#39;&#39;,
    agree:&#39;&#39;
&#125;
</code></pre>
<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><pre><code>过滤器：
    定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。
    语法：
    1.注册过滤器：Vue.filter(name,callback) 或 new Vue&#123;filters:&#123;&#125;&#125;
    2.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名&quot;
    备注：
    1.过滤器也可以接收额外参数、多个过滤器也可以串联
    2.并没有改变原本的数据, 是产生新的对应的数据
</code></pre>
<pre><code>    //全局过滤器
    Vue.filter(&#39;mySlice&#39;,function(value)&#123;
        return value.slice(0,4)
    &#125;)

    //局部过滤器
    filters:&#123;
        timeFormater(value,str=&#39;YYYY年MM月DD日 HH:mm:ss&#39;)&#123;
        // console.log(&#39;@&#39;,value)
        return dayjs(value).format(str)
        &#125;
    &#125;
</code></pre>
<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><pre><code>我们学过的指令：
    v-bind    : 单向绑定解析表达式, 可简写为 :xxx
    v-model    : 双向数据绑定
    v-for      : 遍历数组/对象/字符串
    v-on       : 绑定事件监听, 可简写为@
    v-if          : 条件渲染（动态控制节点是否存存在）
    v-else     : 条件渲染（动态控制节点是否存存在）
    v-show     : 条件渲染 (动态控制节点是否展示)
    v-text指令：
    1.作用：向其所在的节点中渲染文本内容。
    2.与插值语法的区别：v-text会替换掉节点中的内容，&#123;&#123;xx&#125;&#125;则不会。
</code></pre>
<pre><code>v-html指令：
    1.作用：向指定节点中渲染包含html结构的内容。
    2.与插值语法的区别：
    (1).v-html会替换掉节点中所有的内容，&#123;&#123;xx&#125;&#125;则不会。
    (2).v-html可以识别html结构。
    3.严重注意：v-html有安全性问题！！！！
    (1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。
    (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！
</code></pre>
<pre><code>v-cloak指令（没有值）：

            1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。
            2.使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。
v-once指令：
            1.v-once所在节点在初次动态渲染后，就视为静态内容了。
            2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。
v-pre指令：
            1.跳过其所在节点的编译过程。
            2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。
</code></pre>
<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><img src="C:\Users\kuankuan\AppData\Roaming\Typora\typora-user-images\image-20210910095050679.png" alt="image-20210910095050679" style="zoom:150%;" />

<pre><code>directives:&#123;
            //big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。
            /* &#39;big-number&#39;(element,binding)&#123;
            // console.log(&#39;big&#39;)
                element.innerText = binding.value * 10
            &#125;, */
            big(element,binding)&#123;
            console.log(&#39;big&#39;,this) //注意此处的this是window
            // console.log(&#39;big&#39;)
                element.innerText = binding.value * 10
            &#125;,
            fbind:&#123;
            //指令与元素成功绑定时（一上来）
            bind(element,binding)&#123;
                element.value = binding.value
            &#125;,
            //指令所在元素被插入页面时
            inserted(element,binding)&#123;
                element.focus()
            &#125;,
            //指令所在的模板被重新解析时
            update(element,binding)&#123;
                element.value = binding.value
            &#125;
           &#125;
        &#125;
</code></pre>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期：</p>
<p>​            1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</p>
<p>​            2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</p>
<p>​            3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p>
<p>​            4.生命周期函数中的this指向是vm 或 组件实例对象。</p>
<pre><code>常用的生命周期钩子：
                        1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。
                        2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。

                关于销毁Vue实例
                        1.销毁后借助Vue开发者工具看不到任何信息。
                        2.销毁后自定义事件会失效，但原生DOM事件依然有效。
                        3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。
</code></pre>
<h1 id="1-一个重要的内置关系：VueComponent-prototype-proto-Vue-prototype"><a href="#1-一个重要的内置关系：VueComponent-prototype-proto-Vue-prototype" class="headerlink" title="1.一个重要的内置关系：VueComponent.prototype.proto === Vue.prototype"></a>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype</h1><h1 id="2-为什么要有这个关系：让组件实例对象（vc）可以访问到-Vue原型上的属性、方法。"><a href="#2-为什么要有这个关系：让组件实例对象（vc）可以访问到-Vue原型上的属性、方法。" class="headerlink" title="2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。"></a>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</h1>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue  脚手架</title>
    <url>/2021/11/24/vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules 
├── public
│   ├── favicon.ico: 页签图标
│   └── index.html: 主页面
├── src
│   ├── assets: 存放静态资源
│   │   └── logo.png
│   │── component: 存放组件
│   │   └── HelloWorld.vue
│   │── App.vue: 汇总所有组件
│   │── main.js: 入口文件
├── .gitignore: git版本管制忽略的配置
├── babel.config.js: babel的配置文件
├── package.json: 应用包配置文件 
├── README.md: 应用描述文件
├── package-lock.json：包版本控制文件
</code></pre>
<h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol>
<li>vue.js与vue.runtime.xxx.js的区别：<ol>
<li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li>
<li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li>
</ol>
</li>
<li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li>
</ol>
<h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol>
<li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li>
<li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li>
</ol>
<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol>
<li>被用来给元素或子组件注册引用信息（id的替代者）</li>
<li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li>
<li>使用方式：<ol>
<li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>
<li>获取：<code>this.$refs.xxx</code></li>
</ol>
</li>
</ol>
<h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol>
<li><p>功能：让组件接收外部传过来的数据</p>
</li>
<li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>
</li>
<li><p>接收数据：</p>
<ol>
<li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p>
</li>
<li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p>
</li>
<li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p>
<pre><code class="js">props:&#123;
    name:&#123;
    type:String, //类型
    required:true, //必要性
    default:&#39;老王&#39; //默认值
    &#125;
&#125;
</code></pre>
</li>
</ol>
<blockquote>
<p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>
</blockquote>
</li>
</ol>
<h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol>
<li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p>
</li>
<li><p>使用方式：</p>
<p> 第一步定义混合：</p>
<pre><code class="vue">&#123;
    data()&#123;....&#125;,
    methods:&#123;....&#125;
    ....
&#125;
</code></pre>
<p> 第二步使用混入：</p>
<p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:[&#39;xxx&#39;]    </code></p>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li><p>功能：用于增强Vue</p>
</li>
<li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p>
</li>
<li><p>定义插件：</p>
<pre><code class="js">对象.install = function (Vue, options) &#123;
    // 1. 添加全局过滤器
    Vue.filter(....)

    // 2. 添加全局指令
    Vue.directive(....)

    // 3. 配置全局混入(合)
    Vue.mixin(....)

    // 4. 添加实例方法
    Vue.prototype.$myMethod = function () &#123;...&#125;
    Vue.prototype.$myProperty = xxxx
&#125;
</code></pre>
</li>
<li><p>使用插件：<code>Vue.use()</code></p>
</li>
</ol>
<h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol>
<li>作用：让样式在局部生效，防止冲突。</li>
<li>写法：<code>&lt;style scoped&gt;</code></li>
</ol>
<h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol>
<li><p>组件化编码流程：</p>
<p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p>
<p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p>
<p> ​            1).一个组件在用：放在组件自身即可。</p>
<p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p>
<p> ​    (3).实现交互：从绑定事件开始。</p>
</li>
<li><p>props适用于：</p>
<p> ​    (1).父组件 ==&gt; 子组件 通信</p>
<p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p>
</li>
<li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p>
</li>
<li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p>
</li>
</ol>
<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol>
<li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p>
</li>
<li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p>
</li>
<li><p>相关API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p>
<pre><code>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。
</code></pre>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p>
<p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p>
<p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p>
</li>
<li><p><code> xxxxxStorage.clear()</code></p>
<p> ​        该方法会清空存储中的所有数据。</p>
</li>
</ol>
</li>
<li><p>备注：</p>
<ol>
<li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li>
<li>LocalStorage存储的内容，需要手动清除才会消失。</li>
<li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li>
<li><code>JSON.parse(null)</code>的结果依然是null。</li>
</ol>
</li>
</ol>
<h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol>
<li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p>
</li>
<li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p>
</li>
<li><p>绑定自定义事件：</p>
<ol>
<li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p>
</li>
<li><p>第二种方式，在父组件中：</p>
<pre><code class="js">&lt;Demo ref=&quot;demo&quot;/&gt;
......
mounted()&#123;
   this.$refs.xxx.$on(&#39;atguigu&#39;,this.test)
&#125;
</code></pre>
</li>
<li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p>
</li>
</ol>
</li>
<li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p>
</li>
<li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p>
</li>
<li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p>
</li>
<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p>
</li>
</ol>
<h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol>
<li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li><p>安装全局事件总线：</p>
<pre><code class="js">new Vue(&#123;
    ......
    beforeCreate() &#123;
        Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm
    &#125;,
    ......
&#125;) 
</code></pre>
</li>
<li><p>使用事件总线：</p>
<ol>
<li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p>
<pre><code class="js">methods()&#123;
  demo(data)&#123;......&#125;
&#125;
......
mounted() &#123;
  this.$bus.$on(&#39;xxxx&#39;,this.demo)
&#125;
</code></pre>
</li>
<li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p>
</li>
</ol>
</li>
<li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p>
</li>
</ol>
<h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol>
<li><p>  一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li><p>使用步骤：</p>
<ol>
<li><p>安装pubsub：<code>npm i pubsub-js</code></p>
</li>
<li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p>
</li>
<li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p>
<pre><code class="js">methods()&#123;
  demo(data)&#123;......&#125;
&#125;
......
mounted() &#123;
  this.pid = pubsub.subscribe(&#39;xxx&#39;,this.demo) //订阅消息
&#125;
</code></pre>
</li>
<li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p>
</li>
<li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2></li>
</ol>
</li>
<li><p>语法：<code>this.$nextTick(回调函数)</code></p>
</li>
<li><p>作用：在下一次 DOM 更新结束后执行其指定的回调。</p>
</li>
<li><p>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</p>
</li>
</ol>
<h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol>
<li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p>
</li>
<li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p>
</li>
<li><p>写法：</p>
<ol>
<li><p>准备好样式：</p>
<ul>
<li>元素进入的样式：<ol>
<li>v-enter：进入的起点</li>
<li>v-enter-active：进入过程中</li>
<li>v-enter-to：进入的终点</li>
</ol>
</li>
<li>元素离开的样式：<ol>
<li>v-leave：离开的起点</li>
<li>v-leave-active：离开过程中</li>
<li>v-leave-to：离开的终点</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p>
<pre><code class="vue">&lt;transition name=&quot;hello&quot;&gt;
    &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;
&lt;/transition&gt;
</code></pre>
</li>
<li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p>
</li>
</ol>
</li>
</ol>
<h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p>
<pre><code class="js">devServer:&#123;
  proxy:&quot;http://localhost:5000&quot;
&#125;
</code></pre>
<p>说明：</p>
<ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p>
<pre><code class="js">module.exports = &#123;
    devServer: &#123;
      proxy: &#123;
      &#39;/api1&#39;: &#123;// 匹配所有以 &#39;/api1&#39;开头的请求路径
        target: &#39;http://localhost:5000&#39;,// 代理目标的基础路径
        changeOrigin: true,
        pathRewrite: &#123;&#39;^/api1&#39;: &#39;&#39;&#125;
      &#125;,
      &#39;/api2&#39;: &#123;// 匹配所有以 &#39;/api2&#39;开头的请求路径
        target: &#39;http://localhost:5001&#39;,// 代理目标的基础路径
        changeOrigin: true,
        pathRewrite: &#123;&#39;^/api2&#39;: &#39;&#39;&#125;
      &#125;
    &#125;
  &#125;
&#125;
/*
   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000
   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080
   changeOrigin默认值为true
*/
</code></pre>
<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>
<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>
</ol>
<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol>
<li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p>
</li>
<li><p>分类：默认插槽、具名插槽、作用域插槽</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>默认插槽：</p>
<pre><code class="vue">父组件中：
        &lt;Category&gt;
           &lt;div&gt;html结构1&lt;/div&gt;
        &lt;/Category&gt;
子组件中：
        &lt;template&gt;
            &lt;div&gt;
               &lt;!-- 定义插槽 --&gt;
               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;
            &lt;/div&gt;
        &lt;/template&gt;
</code></pre>
</li>
<li><p>具名插槽：</p>
<pre><code class="vue">父组件中：
        &lt;Category&gt;
            &lt;template slot=&quot;center&quot;&gt;
              &lt;div&gt;html结构1&lt;/div&gt;
            &lt;/template&gt;

            &lt;template v-slot:footer&gt;
               &lt;div&gt;html结构2&lt;/div&gt;
            &lt;/template&gt;
        &lt;/Category&gt;
子组件中：
        &lt;template&gt;
            &lt;div&gt;
               &lt;!-- 定义插槽 --&gt;
               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;
               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;
            &lt;/div&gt;
        &lt;/template&gt;
</code></pre>
</li>
<li><p>作用域插槽：</p>
<ol>
<li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p>
</li>
<li><p>具体编码：</p>
<pre><code class="vue">父组件中：
        &lt;Category&gt;
            &lt;template scope=&quot;scopeData&quot;&gt;
                &lt;!-- 生成的是ul列表 --&gt;
                &lt;ul&gt;
                    &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/template&gt;
        &lt;/Category&gt;

        &lt;Category&gt;
            &lt;template slot-scope=&quot;scopeData&quot;&gt;
                &lt;!-- 生成的是h4标题 --&gt;
                &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;
            &lt;/template&gt;
        &lt;/Category&gt;
子组件中：
        &lt;template&gt;
            &lt;div&gt;
                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;
            &lt;/div&gt;
        &lt;/template&gt;
        
        &lt;script&gt;
            export default &#123;
                name:&#39;Category&#39;,
                props:[&#39;title&#39;],
                //数据在子组件自身
                data() &#123;
                    return &#123;
                        games:[&#39;红色警戒&#39;,&#39;穿越火线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]
                    &#125;
                &#125;,
            &#125;
        &lt;/script&gt;
</code></pre>
<p>```</p>
</li>
</ol>
</li>
</ol>
<p>```</p>
</li>
</ol>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>
<h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p>
<h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol>
<li><p>创建文件：<code>src/store/index.js</code></p>
<pre><code class="js">//引入Vue核心库
import Vue from &#39;vue&#39;
//引入Vuex
import Vuex from &#39;vuex&#39;
//应用Vuex插件
Vue.use(Vuex)

//准备actions对象——响应组件中用户的动作
const actions = &#123;&#125;
//准备mutations对象——修改state中的数据
const mutations = &#123;&#125;
//准备state对象——保存具体的数据
const state = &#123;&#125;

//创建并暴露store
export default new Vuex.Store(&#123;
    actions,
    mutations,
    state
&#125;)
</code></pre>
</li>
<li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p>
<pre><code class="js">......
//引入store
import store from &#39;./store&#39;
......

//创建vm
new Vue(&#123;
    el:&#39;#app&#39;,
    render: h =&gt; h(App),
    store
&#125;)
</code></pre>
</li>
</ol>
<h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol>
<li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>
<pre><code class="js">//引入Vue核心库
import Vue from &#39;vue&#39;
//引入Vuex
import Vuex from &#39;vuex&#39;
//引用Vuex
Vue.use(Vuex)

const actions = &#123;
    //响应组件中加的动作
    jia(context,value)&#123;
        // console.log(&#39;actions中的jia被调用了&#39;,miniStore,value)
        context.commit(&#39;JIA&#39;,value)
    &#125;,
&#125;

const mutations = &#123;
    //执行加
    JIA(state,value)&#123;
        // console.log(&#39;mutations中的JIA被调用了&#39;,state,value)
        state.sum += value
    &#125;
&#125;

//初始化数据
const state = &#123;
   sum:0
&#125;

//创建并暴露store
export default new Vuex.Store(&#123;
    actions,
    mutations,
    state,
&#125;)
</code></pre>
</li>
<li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p>
</li>
<li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>
<blockquote>
<p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>
</blockquote>
</li>
</ol>
<h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol>
<li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
<pre><code class="js">......

const getters = &#123;
    bigSum(state)&#123;
        return state.sum * 10
    &#125;
&#125;

//创建并暴露store
export default new Vuex.Store(&#123;
    ......
    getters
&#125;)
</code></pre>
</li>
<li><p>组件中读取数据：<code>$store.getters.bigSum</code></p>
</li>
</ol>
<h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol>
<li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p>
<pre><code class="js">computed: &#123;
    //借助mapState生成计算属性：sum、school、subject（对象写法）
     ...mapState(&#123;sum:&#39;sum&#39;,school:&#39;school&#39;,subject:&#39;subject&#39;&#125;),
         
    //借助mapState生成计算属性：sum、school、subject（数组写法）
    ...mapState([&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),
&#125;,
</code></pre>
</li>
<li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p>
<pre><code class="js">computed: &#123;
    //借助mapGetters生成计算属性：bigSum（对象写法）
    ...mapGetters(&#123;bigSum:&#39;bigSum&#39;&#125;),

    //借助mapGetters生成计算属性：bigSum（数组写法）
    ...mapGetters([&#39;bigSum&#39;])
&#125;,
</code></pre>
</li>
<li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p>
<pre><code class="js">methods:&#123;
    //靠mapActions生成：incrementOdd、incrementWait（对象形式）
    ...mapActions(&#123;incrementOdd:&#39;jiaOdd&#39;,incrementWait:&#39;jiaWait&#39;&#125;)

    //靠mapActions生成：incrementOdd、incrementWait（数组形式）
    ...mapActions([&#39;jiaOdd&#39;,&#39;jiaWait&#39;])
&#125;
</code></pre>
</li>
<li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p>
<pre><code class="js">methods:&#123;
    //靠mapActions生成：increment、decrement（对象形式）
    ...mapMutations(&#123;increment:&#39;JIA&#39;,decrement:&#39;JIAN&#39;&#125;),
    
    //靠mapMutations生成：JIA、JIAN（对象形式）
    ...mapMutations([&#39;JIA&#39;,&#39;JIAN&#39;]),
&#125;
</code></pre>
</li>
</ol>
<blockquote>
<p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p>
</blockquote>
<h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol>
<li><p>目的：让代码更好维护，让多种数据分类更加明确。</p>
</li>
<li><p>修改<code>store.js</code></p>
<pre><code class="javascript">const countAbout = &#123;
  namespaced:true,//开启命名空间
  state:&#123;x:1&#125;,
  mutations: &#123; ... &#125;,
  actions: &#123; ... &#125;,
  getters: &#123;
    bigSum(state)&#123;
       return state.sum * 10
    &#125;
  &#125;
&#125;

const personAbout = &#123;
  namespaced:true,//开启命名空间
  state:&#123; ... &#125;,
  mutations: &#123; ... &#125;,
  actions: &#123; ... &#125;
&#125;

const store = new Vuex.Store(&#123;
  modules: &#123;
    countAbout,
    personAbout
  &#125;
&#125;)
</code></pre>
</li>
<li><p>开启命名空间后，组件中读取state数据：</p>
<pre><code class="js">//方式一：自己直接读取
this.$store.state.personAbout.list
//方式二：借助mapState读取：
...mapState(&#39;countAbout&#39;,[&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),
</code></pre>
</li>
<li><p>开启命名空间后，组件中读取getters数据：</p>
<pre><code class="js">//方式一：自己直接读取
this.$store.getters[&#39;personAbout/firstPersonName&#39;]
//方式二：借助mapGetters读取：
...mapGetters(&#39;countAbout&#39;,[&#39;bigSum&#39;])
</code></pre>
</li>
<li><p>开启命名空间后，组件中调用dispatch</p>
<pre><code class="js">//方式一：自己直接dispatch
this.$store.dispatch(&#39;personAbout/addPersonWang&#39;,person)
//方式二：借助mapActions：
...mapActions(&#39;countAbout&#39;,&#123;incrementOdd:&#39;jiaOdd&#39;,incrementWait:&#39;jiaWait&#39;&#125;)
</code></pre>
</li>
<li><p>开启命名空间后，组件中调用commit</p>
<pre><code class="js">//方式一：自己直接commit
this.$store.commit(&#39;personAbout/ADD_PERSON&#39;,person)
//方式二：借助mapMutations：
...mapMutations(&#39;countAbout&#39;,&#123;increment:&#39;JIA&#39;,decrement:&#39;JIAN&#39;&#125;),
</code></pre>
</li>
</ol>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li>
<li>前端路由：key是路径，value是组件。</li>
</ol>
<h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol>
<li><p>安装vue-router，命令：<code>npm i vue-router</code></p>
</li>
<li><p>应用插件：<code>Vue.use(VueRouter)</code></p>
</li>
<li><p>编写router配置项:</p>
<pre><code class="js">//引入VueRouter
import VueRouter from &#39;vue-router&#39;
//引入Luyou 组件
import About from &#39;../components/About&#39;
import Home from &#39;../components/Home&#39;

//创建router实例对象，去管理一组一组的路由规则
const router = new VueRouter(&#123;
    routes:[
        &#123;
            path:&#39;/about&#39;,
            component:About
        &#125;,
        &#123;
            path:&#39;/home&#39;,
            component:Home
        &#125;
    ]
&#125;)

//暴露router
export default router
</code></pre>
</li>
<li><p>实现切换（active-class可配置高亮样式）</p>
<pre><code class="vue">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;
</code></pre>
</li>
<li><p>指定展示位置</p>
<pre><code class="vue">&lt;router-view&gt;&lt;/router-view&gt;
</code></pre>
</li>
</ol>
<h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol>
<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li>
<li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li>
</ol>
<h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol>
<li><p>配置路由规则，使用children配置项：</p>
<pre><code class="js">routes:[
    &#123;
        path:&#39;/about&#39;,
        component:About,
    &#125;,
    &#123;
        path:&#39;/home&#39;,
        component:Home,
        children:[ //通过children配置子级路由
            &#123;
                path:&#39;news&#39;, //此处一定不要写：/news
                component:News
            &#125;,
            &#123;
                path:&#39;message&#39;,//此处一定不要写：/message
                component:Message
            &#125;
        ]
    &#125;
]
</code></pre>
</li>
<li><p>跳转（要写完整路径）：</p>
<pre><code class="vue">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;
</code></pre>
</li>
</ol>
<h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol>
<li><p>传递参数</p>
<pre><code class="vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;
&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;
                
&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;
&lt;router-link 
    :to=&quot;&#123;
        path:&#39;/home/message/detail&#39;,
        query:&#123;
           id:666,
            title:&#39;你好&#39;
        &#125;
    &#125;&quot;
&gt;跳转&lt;/router-link&gt;
</code></pre>
</li>
<li><p>接收参数：</p>
<pre><code class="js">$route.query.id
$route.query.title
</code></pre>
</li>
</ol>
<h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol>
<li><p>作用：可以简化路由的跳转。</p>
</li>
<li><p>如何使用</p>
<ol>
<li><p>给路由命名：</p>
<pre><code class="js">&#123;
    path:&#39;/demo&#39;,
    component:Demo,
    children:[
        &#123;
            path:&#39;test&#39;,
            component:Test,
            children:[
                &#123;
                      name:&#39;hello&#39; //给路由命名
                    path:&#39;welcome&#39;,
                    component:Hello,
                &#125;
            ]
        &#125;
    ]
&#125;
</code></pre>
</li>
<li><p>简化跳转：</p>
<pre><code class="vue">&lt;!--简化前，需要写完整的路径 --&gt;
&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;

&lt;!--简化后，直接通过名字跳转 --&gt;
&lt;router-link :to=&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;/router-link&gt;

&lt;!--简化写法配合传递参数 --&gt;
&lt;router-link 
    :to=&quot;&#123;
        name:&#39;hello&#39;,
        query:&#123;
           id:666,
            title:&#39;你好&#39;
        &#125;
    &#125;&quot;
&gt;跳转&lt;/router-link&gt;
</code></pre>
</li>
</ol>
</li>
</ol>
<h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol>
<li><p>配置路由，声明接收params参数</p>
<pre><code class="js">&#123;
    path:&#39;/home&#39;,
    component:Home,
    children:[
        &#123;
            path:&#39;news&#39;,
            component:News
        &#125;,
        &#123;
            component:Message,
            children:[
                &#123;
                    name:&#39;xiangqing&#39;,
                    path:&#39;detail/:id/:title&#39;, //使用占位符声明接收params参数
                    component:Detail
                &#125;
            ]
        &#125;
    ]
&#125;
</code></pre>
</li>
<li><p>传递参数</p>
<pre><code class="vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;
&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;
                
&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;
&lt;router-link 
    :to=&quot;&#123;
        name:&#39;xiangqing&#39;,
        params:&#123;
           id:666,
            title:&#39;你好&#39;
        &#125;
    &#125;&quot;
&gt;跳转&lt;/router-link&gt;
</code></pre>
<blockquote>
<p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p>
</blockquote>
</li>
<li><p>接收参数：</p>
<pre><code class="js">$route.params.id
$route.params.title
</code></pre>
</li>
</ol>
<h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p>
<pre><code class="js">&#123;
    name:&#39;xiangqing&#39;,
    path:&#39;detail/:id&#39;,
    component:Detail,

    //第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件
    // props:&#123;a:900&#125;

    //第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件
    // props:true
    
    //第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件
    props(route)&#123;
        return &#123;
            id:route.query.id,
            title:route.query.title
        &#125;
    &#125;
&#125;
</code></pre>
<h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li>
<li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>
</ol>
<h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol>
<li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p>
</li>
<li><p>具体编码：</p>
<pre><code class="js">//$router的两个API
this.$router.push(&#123;
    name:&#39;xiangqing&#39;,
        params:&#123;
            id:xxx,
            title:xxx
        &#125;
&#125;)

this.$router.replace(&#123;
    name:&#39;xiangqing&#39;,
        params:&#123;
            id:xxx,
            title:xxx
        &#125;
&#125;)
this.$router.forward() //前进
this.$router.back() //后退
this.$router.go() //可前进也可后退
</code></pre>
</li>
</ol>
<h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol>
<li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p>
</li>
<li><p>具体编码：</p>
<pre><code class="vue">&lt;keep-alive include=&quot;News&quot;&gt; 
    &lt;router-view&gt;&lt;/router-view&gt;
&lt;/keep-alive&gt;
</code></pre>
</li>
</ol>
<h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol>
<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>
<li>具体名字：<ol>
<li><code>activated</code>路由组件被激活时触发。</li>
<li><code>deactivated</code>路由组件失活时触发。</li>
</ol>
</li>
</ol>
<h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol>
<li><p>作用：对路由进行权限控制</p>
</li>
<li><p>分类：全局守卫、独享守卫、组件内守卫</p>
</li>
<li><p>全局守卫:</p>
<pre><code class="js">//全局前置守卫：初始化时执行、每次路由切换前执行
router.beforeEach((to,from,next)=&gt;&#123;
    console.log(&#39;beforeEach&#39;,to,from)
    if(to.meta.isAuth)&#123; //判断当前路由是否需要进行权限控制
        if(localStorage.getItem(&#39;school&#39;) === &#39;atguigu&#39;)&#123; //权限控制的具体规则
            next() //放行
        &#125;else&#123;
            alert(&#39;暂无权限查看&#39;)
            // next(&#123;name:&#39;guanyu&#39;&#125;)
        &#125;
    &#125;else&#123;
        next() //放行
    &#125;
&#125;)

//全局后置守卫：初始化时执行、每次路由切换后执行
router.afterEach((to,from)=&gt;&#123;
    console.log(&#39;afterEach&#39;,to,from)
    if(to.meta.title)&#123; 
        document.title = to.meta.title //修改网页的title
    &#125;else&#123;
        document.title = &#39;vue_test&#39;
    &#125;
&#125;)
</code></pre>
</li>
<li><p>独享守卫:</p>
<pre><code class="js">beforeEnter(to,from,next)&#123;
    console.log(&#39;beforeEnter&#39;,to,from)
    if(to.meta.isAuth)&#123; //判断当前路由是否需要进行权限控制
        if(localStorage.getItem(&#39;school&#39;) === &#39;atguigu&#39;)&#123;
            next()
        &#125;else&#123;
            alert(&#39;暂无权限查看&#39;)
            // next(&#123;name:&#39;guanyu&#39;&#125;)
        &#125;
    &#125;else&#123;
        next()
    &#125;
&#125;
</code></pre>
</li>
<li><p>组件内守卫：</p>
<pre><code class="js">//进入守卫：通过路由规则，进入该组件时被调用
beforeRouteEnter (to, from, next) &#123;
&#125;,
//离开守卫：通过路由规则，离开该组件时被调用
beforeRouteLeave (to, from, next) &#123;
&#125;
</code></pre>
</li>
</ol>
<h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol>
<li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li>
<li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li>
<li>hash模式：<ol>
<li>地址中永远带着#号，不美观 。</li>
<li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li>
<li>兼容性较好。</li>
</ol>
</li>
<li>history模式：<ol>
<li>地址干净，美观 。</li>
<li>兼容性和hash模式相比略差。</li>
<li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
</search>
